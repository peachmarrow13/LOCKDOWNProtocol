#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AlimBox

#include "Basic.hpp"

#include "AlimBox_classes.hpp"
#include "AlimBox_parameters.hpp"


namespace SDK
{

// Function AlimBox.AlimBox_C.All Alim State
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Battery_Value_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Alim_FuzeState                        Fuze_State_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Task_Value_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::All_Alim_State(int32 Battery_Value_0, E_Alim_FuzeState Fuze_State_0, int32 Task_Value_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "All Alim State");

	Params::AlimBox_C_All_Alim_State Parms{};

	Parms.Battery_Value_0 = Battery_Value_0;
	Parms.Fuze_State_0 = Fuze_State_0;
	Parms.Task_Value_0 = Task_Value_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.All Jauge Bip
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Jauge                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::All_Jauge_Bip(int32 Jauge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "All Jauge Bip");

	Params::AlimBox_C_All_Jauge_Bip Parms{};

	Parms.Jauge = Jauge;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.All PLay Bip
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::All_PLay_Bip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "All PLay Bip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.All Set Glass State
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Close                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::All_Set_Glass_State(bool Close)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "All Set Glass State");

	Params::AlimBox_C_All_Set_Glass_State Parms{};

	Parms.Close = Close;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.BndEvt__AlimBox_Battery_K2Node_ComponentBoundEvent_0_Place Item__DelegateSignature
// (BlueprintEvent)

void AAlimBox_C::BndEvt__AlimBox_Battery_K2Node_ComponentBoundEvent_0_Place_Item__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "BndEvt__AlimBox_Battery_K2Node_ComponentBoundEvent_0_Place Item__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.BndEvt__AlimBox_Battery_K2Node_ComponentBoundEvent_1_Take Item__DelegateSignature
// (BlueprintEvent)

void AAlimBox_C::BndEvt__AlimBox_Battery_K2Node_ComponentBoundEvent_1_Take_Item__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "BndEvt__AlimBox_Battery_K2Node_ComponentBoundEvent_1_Take Item__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Check Alim State
// (BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Check_Alim_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Check Alim State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Check Fuzes
// (Public, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Check_Fuzes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Check Fuzes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Clear
// (BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.ExecuteUbergraph_AlimBox
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::ExecuteUbergraph_AlimBox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "ExecuteUbergraph_AlimBox");

	Params::AlimBox_C_ExecuteUbergraph_AlimBox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.Generate Fuzes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Generate_Fuzes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Generate Fuzes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Get MapPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::Get_MapPosition(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Get MapPosition");

	Params::AlimBox_C_Get_MapPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function AlimBox.AlimBox_C.Process Tick
// (BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Process_Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Process Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAlimBox_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Set Light State
// (Public, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Set_Light_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Set Light State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Set Request Colors
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   In_Color_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Out_Color_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::Set_Request_Colors(int32 In_Color_0, int32 Out_Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Set Request Colors");

	Params::AlimBox_C_Set_Request_Colors Parms{};

	Parms.In_Color_0 = In_Color_0;
	Parms.Out_Color_0 = Out_Color_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.Spawn Batteries
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Min_Charge                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max_Charge                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FStr_Item>*               Array                                                  (Parm, OutParm)

void AAlimBox_C::Spawn_Batteries(int32 Count, int32 Min_Charge, int32 Max_Charge, TArray<struct FStr_Item>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Spawn Batteries");

	Params::AlimBox_C_Spawn_Batteries Parms{};

	Parms.Count = Count;
	Parms.Min_Charge = Min_Charge;
	Parms.Max_Charge = Max_Charge;

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function AlimBox.AlimBox_C.Start Alim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Batteries_Count_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Fuze_Rab                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::Start_Alim(int32 Batteries_Count_0, int32 Fuze_Rab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Start Alim");

	Params::AlimBox_C_Start_Alim Parms{};

	Parms.Batteries_Count_0 = Batteries_Count_0;
	Parms.Fuze_Rab = Fuze_Rab;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.Start Light Anim
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Start_Light_Anim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Start Light Anim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Start Process
// (BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Start_Process()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Start Process");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Stop Light Anim
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Stop_Light_Anim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Stop Light Anim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Stop Process
// (BlueprintCallable, BlueprintEvent)

void AAlimBox_C::Stop_Process()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Stop Process");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.TL LightAnim__FinishedFunc
// (BlueprintEvent)

void AAlimBox_C::TL_LightAnim__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "TL LightAnim__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.TL LightAnim__UpdateFunc
// (BlueprintEvent)

void AAlimBox_C::TL_LightAnim__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "TL LightAnim__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AlimBox.AlimBox_C.Update PowerLine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Request_A                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Request_B                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Valid_A                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Valid_B                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Drain_A                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Drain_B                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::Update_PowerLine(const struct FLinearColor& Request_A, const struct FLinearColor& Request_B, const struct FLinearColor& Valid_A, const struct FLinearColor& Valid_B, const struct FLinearColor& Drain_A, const struct FLinearColor& Drain_B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Update PowerLine");

	Params::AlimBox_C_Update_PowerLine Parms{};

	Parms.Request_A = std::move(Request_A);
	Parms.Request_B = std::move(Request_B);
	Parms.Valid_A = std::move(Valid_A);
	Parms.Valid_B = std::move(Valid_B);
	Parms.Drain_A = std::move(Drain_A);
	Parms.Drain_B = std::move(Drain_B);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.Use Battery
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Use                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAlimBox_C::Use_Battery(int32 Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "Use Battery");

	Params::AlimBox_C_Use_Battery Parms{};

	Parms.Use = Use;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AlimBox.AlimBox_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AAlimBox_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlimBox_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

