#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Data_Skin_Body

#include "Basic.hpp"

#include "Data_Skin_Body_classes.hpp"
#include "Data_Skin_Body_parameters.hpp"


namespace SDK
{

// Function Data_Skin_Body.Data_Skin_Body_C.Set Body
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           BodyMesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const Enum_SelectedColor&               Color                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Skin                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UData_Skin_Patch_C*               PatchRound                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UData_Skin_Patch_C*               PatchSquare                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    Helmet_Color                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UData_Skin_Body_C::Set_Body(class USkeletalMeshComponent* BodyMesh, const Enum_SelectedColor& Color, const struct FVector2D& Skin, class UData_Skin_Patch_C* PatchRound, class UData_Skin_Patch_C* PatchSquare, struct FLinearColor* Helmet_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Data_Skin_Body_C", "Set Body");

	Params::Data_Skin_Body_C_Set_Body Parms{};

	Parms.BodyMesh = BodyMesh;
	Parms.Color = Color;
	Parms.Skin = std::move(Skin);
	Parms.PatchRound = PatchRound;
	Parms.PatchSquare = PatchSquare;

	UObject::ProcessEvent(Func, &Parms);

	if (Helmet_Color != nullptr)
		*Helmet_Color = std::move(Parms.Helmet_Color);
}

}

