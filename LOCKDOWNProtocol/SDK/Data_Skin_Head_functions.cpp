#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Data_Skin_Head

#include "Basic.hpp"

#include "Data_Skin_Head_classes.hpp"
#include "Data_Skin_Head_parameters.hpp"


namespace SDK
{

// Function Data_Skin_Head.Data_Skin_Head_C.Set Head
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const Enum_SelectedColor&               Color                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Skin                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UData_Face_C*                     Face                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Helmet_Color                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic**        Face_Material_Instnce                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UData_Skin_Head_C::Set_Head(class USkeletalMeshComponent* Mesh_0, const Enum_SelectedColor& Color, const struct FVector2D& Skin, class UData_Face_C* Face, const struct FLinearColor& Helmet_Color, class UMaterialInstanceDynamic** Face_Material_Instnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Data_Skin_Head_C", "Set Head");

	Params::Data_Skin_Head_C_Set_Head Parms{};

	Parms.Mesh_0 = Mesh_0;
	Parms.Color = Color;
	Parms.Skin = std::move(Skin);
	Parms.Face = Face;
	Parms.Helmet_Color = std::move(Helmet_Color);

	UObject::ProcessEvent(Func, &Parms);

	if (Face_Material_Instnce != nullptr)
		*Face_Material_Instnce = Parms.Face_Material_Instnce;
}

}

