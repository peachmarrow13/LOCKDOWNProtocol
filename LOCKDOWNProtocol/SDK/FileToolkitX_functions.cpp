#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FileToolkitX

#include "Basic.hpp"

#include "FileToolkitX_classes.hpp"
#include "FileToolkitX_parameters.hpp"


namespace SDK
{

// Function FileToolkitX.FileToolkitXBPLibrary.CheckFileModificationDate
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 ReferenceDate                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::CheckFileModificationDate(const class FString& FilePath, const struct FDateTime& ReferenceDate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "CheckFileModificationDate");

	Params::FileToolkitXBPLibrary_CheckFileModificationDate Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.ReferenceDate = std::move(ReferenceDate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.CompareFileSizes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath1                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FilePath2                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  Difference                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::CompareFileSizes(const class FString& FilePath1, const class FString& FilePath2, int64* Difference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "CompareFileSizes");

	Params::FileToolkitXBPLibrary_CompareFileSizes Parms{};

	Parms.FilePath1 = std::move(FilePath1);
	Parms.FilePath2 = std::move(FilePath2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Difference != nullptr)
		*Difference = Parms.Difference;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.CopyFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SourceFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DestFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::CopyFile(const class FString& SourceFilePath, const class FString& DestFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "CopyFile");

	Params::FileToolkitXBPLibrary_CopyFile Parms{};

	Parms.SourceFilePath = std::move(SourceFilePath);
	Parms.DestFilePath = std::move(DestFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.CreateJsonFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::CreateJsonFile(const class FString& FilePath, const TMap<class FString, class FString>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "CreateJsonFile");

	Params::FileToolkitXBPLibrary_CreateJsonFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.DeleteDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DirectoryPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::DeleteDirectory(const class FString& DirectoryPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "DeleteDirectory");

	Params::FileToolkitXBPLibrary_DeleteDirectory Parms{};

	Parms.DirectoryPath = std::move(DirectoryPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.DeleteFileX
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::DeleteFileX(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "DeleteFileX");

	Params::FileToolkitXBPLibrary_DeleteFileX Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.DoesFileExist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::DoesFileExist(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "DoesFileExist");

	Params::FileToolkitXBPLibrary_DoesFileExist Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.GetAllFileSizes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FolderPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, int64>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, int64> UFileToolkitXBPLibrary::GetAllFileSizes(const class FString& FolderPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "GetAllFileSizes");

	Params::FileToolkitXBPLibrary_GetAllFileSizes Parms{};

	Parms.FolderPath = std::move(FolderPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.GetFileCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FolderPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFileToolkitXBPLibrary::GetFileCount(const class FString& FolderPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "GetFileCount");

	Params::FileToolkitXBPLibrary_GetFileCount Parms{};

	Parms.FolderPath = std::move(FolderPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.GetFileModificationDate
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime*                       OutModificationDate                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::GetFileModificationDate(const class FString& FilePath, struct FDateTime* OutModificationDate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "GetFileModificationDate");

	Params::FileToolkitXBPLibrary_GetFileModificationDate Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutModificationDate != nullptr)
		*OutModificationDate = std::move(Parms.OutModificationDate);

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.GetFileSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFileToolkitXBPLibrary::GetFileSize(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "GetFileSize");

	Params::FileToolkitXBPLibrary_GetFileSize Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.IsFileReadOnly
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::IsFileReadOnly(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "IsFileReadOnly");

	Params::FileToolkitXBPLibrary_IsFileReadOnly Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.IsFolderEmpty
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FolderPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::IsFolderEmpty(const class FString& FolderPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "IsFolderEmpty");

	Params::FileToolkitXBPLibrary_IsFolderEmpty Parms{};

	Parms.FolderPath = std::move(FolderPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.MoveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SourceFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DestFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::MoveFile(const class FString& SourceFilePath, const class FString& DestFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "MoveFile");

	Params::FileToolkitXBPLibrary_MoveFile Parms{};

	Parms.SourceFilePath = std::move(SourceFilePath);
	Parms.DestFilePath = std::move(DestFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.PrintMapContents
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const TMap<class FString, class FString>&MapToPrint                                             (Parm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TextColor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DisplayTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFileToolkitXBPLibrary::PrintMapContents(const TMap<class FString, class FString>& MapToPrint, const struct FLinearColor& TextColor, float DisplayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "PrintMapContents");

	Params::FileToolkitXBPLibrary_PrintMapContents Parms{};

	Parms.MapToPrint = std::move(MapToPrint);
	Parms.TextColor = std::move(TextColor);
	Parms.DisplayTime = DisplayTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FileToolkitX.FileToolkitXBPLibrary.ReadFileContent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFileToolkitXBPLibrary::ReadFileContent(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "ReadFileContent");

	Params::FileToolkitXBPLibrary_ReadFileContent Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.RunExeFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::RunExeFile(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "RunExeFile");

	Params::FileToolkitXBPLibrary_RunExeFile Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.FileToolkitXBPLibrary.RunFileWithOptions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InFilePath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InArguments                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InWithAdminRights                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFileToolkitXBPLibrary::RunFileWithOptions(const class FString& InFilePath, const class FString& InArguments, bool InWithAdminRights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FileToolkitXBPLibrary", "RunFileWithOptions");

	Params::FileToolkitXBPLibrary_RunFileWithOptions Parms{};

	Parms.InFilePath = std::move(InFilePath);
	Parms.InArguments = std::move(InArguments);
	Parms.InWithAdminRights = InWithAdminRights;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FileToolkitX.RunFileWithOptionsAsyncAction.RunFileWithOptionsAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InFilePath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InArguments                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InWithAdminRights                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URunFileWithOptionsAsyncAction*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URunFileWithOptionsAsyncAction* URunFileWithOptionsAsyncAction::RunFileWithOptionsAsync(const class FString& InFilePath, const class FString& InArguments, bool InWithAdminRights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RunFileWithOptionsAsyncAction", "RunFileWithOptionsAsync");

	Params::RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync Parms{};

	Parms.InFilePath = std::move(InFilePath);
	Parms.InArguments = std::move(InArguments);
	Parms.InWithAdminRights = InWithAdminRights;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

