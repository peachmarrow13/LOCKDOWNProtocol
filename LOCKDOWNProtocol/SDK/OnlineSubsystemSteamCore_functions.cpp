#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlineSubsystemSteamCore

#include "Basic.hpp"

#include "OnlineSubsystemSteamCore_classes.hpp"
#include "OnlineSubsystemSteamCore_parameters.hpp"


namespace SDK
{

// Function OnlineSubsystemSteamCore.OnlineSessionInterfaceSteamCoreUtils.GetJoinedLobbyIds
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UOnlineSessionInterfaceSteamCoreUtils::GetJoinedLobbyIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSessionInterfaceSteamCoreUtils", "GetJoinedLobbyIds");

	Params::OnlineSessionInterfaceSteamCoreUtils_GetJoinedLobbyIds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OnlineSubsystemSteamCore.OnlineSessionInterfaceSteamCoreUtils.GetLastJoinedLobbyId
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UOnlineSessionInterfaceSteamCoreUtils::GetLastJoinedLobbyId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnlineSessionInterfaceSteamCoreUtils", "GetLastJoinedLobbyId");

	Params::OnlineSessionInterfaceSteamCoreUtils_GetLastJoinedLobbyId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OnlineSubsystemSteamCore.SteamCoreSubsystemUtilities.FindFriendSessions
// (Final, Native, Static, Public, BlueprintCallable)

void USteamCoreSubsystemUtilities::FindFriendSessions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamCoreSubsystemUtilities", "FindFriendSessions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OnlineSubsystemSteamCore.SteamCoreSubsystemUtilities.GetExtraSessionSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSteamSessionSetting>*    SessionSettings                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USteamCoreSubsystemUtilities::GetExtraSessionSettings(TArray<struct FSteamSessionSetting>* SessionSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamCoreSubsystemUtilities", "GetExtraSessionSettings");

	Params::SteamCoreSubsystemUtilities_GetExtraSessionSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SessionSettings != nullptr)
		*SessionSettings = std::move(Parms.SessionSettings);
}


// Function OnlineSubsystemSteamCore.SteamCoreSubsystemUtilities.GetSessionSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSteamSessionSetting>*    SessionSettings                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString*                          SessionName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  MaxPlayers                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAllowInvites                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bUsesPresence                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAllowJoinInProgress                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAllowJoinViaPresence                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAllowJoinViaPresenceFriendsOnly                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAntiCheatProtected                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bUsesStats                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bShouldAdvertise                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bUseLobbiesIfAvailable                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bUseLobbiesVoiceChatIfAvailable                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USteamCoreSubsystemUtilities::GetSessionSettings(class UObject* WorldContextObject, TArray<struct FSteamSessionSetting>* SessionSettings, class FString* SessionName, int32* MaxPlayers, bool* bAllowInvites, bool* bUsesPresence, bool* bAllowJoinInProgress, bool* bAllowJoinViaPresence, bool* bAllowJoinViaPresenceFriendsOnly, bool* bAntiCheatProtected, bool* bUsesStats, bool* bShouldAdvertise, bool* bUseLobbiesIfAvailable, bool* bUseLobbiesVoiceChatIfAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamCoreSubsystemUtilities", "GetSessionSettings");

	Params::SteamCoreSubsystemUtilities_GetSessionSettings Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SessionSettings != nullptr)
		*SessionSettings = std::move(Parms.SessionSettings);

	if (SessionName != nullptr)
		*SessionName = std::move(Parms.SessionName);

	if (MaxPlayers != nullptr)
		*MaxPlayers = Parms.MaxPlayers;

	if (bAllowInvites != nullptr)
		*bAllowInvites = Parms.bAllowInvites;

	if (bUsesPresence != nullptr)
		*bUsesPresence = Parms.bUsesPresence;

	if (bAllowJoinInProgress != nullptr)
		*bAllowJoinInProgress = Parms.bAllowJoinInProgress;

	if (bAllowJoinViaPresence != nullptr)
		*bAllowJoinViaPresence = Parms.bAllowJoinViaPresence;

	if (bAllowJoinViaPresenceFriendsOnly != nullptr)
		*bAllowJoinViaPresenceFriendsOnly = Parms.bAllowJoinViaPresenceFriendsOnly;

	if (bAntiCheatProtected != nullptr)
		*bAntiCheatProtected = Parms.bAntiCheatProtected;

	if (bUsesStats != nullptr)
		*bUsesStats = Parms.bUsesStats;

	if (bShouldAdvertise != nullptr)
		*bShouldAdvertise = Parms.bShouldAdvertise;

	if (bUseLobbiesIfAvailable != nullptr)
		*bUseLobbiesIfAvailable = Parms.bUseLobbiesIfAvailable;

	if (bUseLobbiesVoiceChatIfAvailable != nullptr)
		*bUseLobbiesVoiceChatIfAvailable = Parms.bUseLobbiesVoiceChatIfAvailable;
}


// Function OnlineSubsystemSteamCore.SteamCoreSubsystemUtilities.SendSessionInviteToFriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   LocalUserNum                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FriendSteamId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamCoreSubsystemUtilities::SendSessionInviteToFriend(int32 LocalUserNum, const class FString& FriendSteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamCoreSubsystemUtilities", "SendSessionInviteToFriend");

	Params::SteamCoreSubsystemUtilities_SendSessionInviteToFriend Parms{};

	Parms.LocalUserNum = LocalUserNum;
	Parms.FriendSteamId = std::move(FriendSteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

