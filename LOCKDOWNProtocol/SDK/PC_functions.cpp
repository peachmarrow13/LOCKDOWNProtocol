#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC

#include "Basic.hpp"

#include "PC_classes.hpp"
#include "PC_parameters.hpp"


namespace SDK
{

// Function PC.PC_C.Apply Graphics Settings
// (BlueprintCallable, BlueprintEvent)

void APC_C::Apply_Graphics_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Apply Graphics Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.Apply Mic Settings
// (Public, BlueprintCallable, BlueprintEvent)

void APC_C::Apply_Mic_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Apply Mic Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.Banned Session Close
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void APC_C::Banned_Session_Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Banned Session Close");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.Check Resolution
// (BlueprintCallable, BlueprintEvent)

void APC_C::Check_Resolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Check Resolution");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.ExecuteUbergraph_PC
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::ExecuteUbergraph_PC(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "ExecuteUbergraph_PC");

	Params::PC_C_ExecuteUbergraph_PC Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Force World Volume
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TRUE_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Force_World_Volume(bool TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Force World Volume");

	Params::PC_C_Force_World_Volume Parms{};

	Parms.TRUE_0 = TRUE_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Get Fog Quality
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 APC_C::Get_Fog_Quality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Get Fog Quality");

	Params::PC_C_Get_Fog_Quality Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PC.PC_C.Get Resolutions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FIntPoint>*               Resolutions                                            (Parm, OutParm)

void APC_C::Get_Resolutions(TArray<struct FIntPoint>* Resolutions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Get Resolutions");

	Params::PC_C_Get_Resolutions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Resolutions != nullptr)
		*Resolutions = std::move(Parms.Resolutions);
}


// Function PC.PC_C.Graphic Commands
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Frame_Weight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Sharpen                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ScreenPercentage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Near_Clip                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Fog                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DOF_Quality                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Bloom_Quality                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Motion_Blur                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AO                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AA                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Graphic_Commands(double Frame_Weight, double Sharpen, int32 ScreenPercentage, int32 Near_Clip, int32 Fog, int32 DOF_Quality, int32 Bloom_Quality, int32 Motion_Blur, bool AO, bool AA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Graphic Commands");

	Params::PC_C_Graphic_Commands Parms{};

	Parms.Frame_Weight = Frame_Weight;
	Parms.Sharpen = Sharpen;
	Parms.ScreenPercentage = ScreenPercentage;
	Parms.Near_Clip = Near_Clip;
	Parms.Fog = Fog;
	Parms.DOF_Quality = DOF_Quality;
	Parms.Bloom_Quality = Bloom_Quality;
	Parms.Motion_Blur = Motion_Blur;
	Parms.AO = AO;
	Parms.AA = AA;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Initiate
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void APC_C::Initiate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Initiate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.InpActEvt_AnyKey_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void APC_C::InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "InpActEvt_AnyKey_K2Node_InputKeyEvent_0");

	Params::PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Invite Accepted
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LocalPlayerNum                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    InvitedBy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FBlueprintSessionResult&   Session                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void APC_C::Invite_Accepted(bool bWasSuccessful, int32 LocalPlayerNum, const class FString& InvitedBy, const struct FBlueprintSessionResult& Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Invite Accepted");

	Params::PC_C_Invite_Accepted Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.LocalPlayerNum = LocalPlayerNum;
	Parms.InvitedBy = std::move(InvitedBy);
	Parms.Session = std::move(Session);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Quit Session by Force
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Client_Only                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_LoadMessage                           ScreenMessage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Quit_Session_by_Force(bool Client_Only, E_LoadMessage ScreenMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Quit Session by Force");

	Params::PC_C_Quit_Session_by_Force Parms{};

	Parms.Client_Only = Client_Only;
	Parms.ScreenMessage = ScreenMessage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APC_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.ReceivePossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            PossessedPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APC_C::ReceivePossess(class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "ReceivePossess");

	Params::PC_C_ReceivePossess Parms{};

	Parms.PossessedPawn = PossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Save Graphics
// (BlueprintCallable, BlueprintEvent)

void APC_C::Save_Graphics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Save Graphics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.Set Antialiasing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Antialiasing(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Antialiasing");

	Params::PC_C_Set_Antialiasing Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Bloom Quality
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Bloom_Quality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Bloom Quality");

	Params::PC_C_Set_Bloom_Quality Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set DOF Quality
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_DOF_Quality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set DOF Quality");

	Params::PC_C_Set_DOF_Quality Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Fog Quality
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Fog_Quality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Fog Quality");

	Params::PC_C_Set_Fog_Quality Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set FPS Cap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_FPS_Cap(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set FPS Cap");

	Params::PC_C_Set_FPS_Cap Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Global Volume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Global_Volume(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Global Volume");

	Params::PC_C_Set_Global_Volume Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Indirect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Indirect(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Indirect");

	Params::PC_C_Set_Indirect Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Mic Gate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Mic_Gate(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Mic Gate");

	Params::PC_C_Set_Mic_Gate Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Mic input
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void APC_C::Set_Mic_input(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Mic input");

	Params::PC_C_Set_Mic_input Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Mic Volume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Mic_Volume(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Mic Volume");

	Params::PC_C_Set_Mic_Volume Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set MotionBlur
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_MotionBlur(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set MotionBlur");

	Params::PC_C_Set_MotionBlur Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Reflections
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Reflections(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Reflections");

	Params::PC_C_Set_Reflections Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Reflex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Reflex(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Reflex");

	Params::PC_C_Set_Reflex Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set RenderScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_RenderScale(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set RenderScale");

	Params::PC_C_Set_RenderScale Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Resolution
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Resolution(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Resolution");

	Params::PC_C_Set_Resolution Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set Screen Mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWindowMode                             Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_Screen_Mode(EWindowMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set Screen Mode");

	Params::PC_C_Set_Screen_Mode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set VSync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_VSync(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set VSync");

	Params::PC_C_Set_VSync Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Set World Volume
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TRUE_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APC_C::Set_World_Volume(bool TRUE_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Set World Volume");

	Params::PC_C_Set_World_Volume Parms{};

	Parms.TRUE_0 = TRUE_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PC.PC_C.Volume Transition__FinishedFunc
// (BlueprintEvent)

void APC_C::Volume_Transition__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Volume Transition__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PC.PC_C.Volume Transition__UpdateFunc
// (BlueprintEvent)

void APC_C::Volume_Transition__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC_C", "Volume Transition__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}

}

