#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeDataTable

#include "Basic.hpp"

#include "RuntimeDataTable_classes.hpp"
#include "RuntimeDataTable_parameters.hpp"


namespace SDK
{

// Function RuntimeDataTable.RuntimeDataTableWebToken.Init
// (Final, Native, Public)
// Parameters:
// const class FString&                    InTokenText                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SecondsUntilExpiration                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URuntimeDataTableWebToken::Init(const class FString& InTokenText, const int32 SecondsUntilExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeDataTableWebToken", "Init");

	Params::RuntimeDataTableWebToken_Init Parms{};

	Parms.InTokenText = std::move(InTokenText);
	Parms.SecondsUntilExpiration = SecondsUntilExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableWebToken.GetNumberOfSecondsUntilExpiration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URuntimeDataTableWebToken::GetNumberOfSecondsUntilExpiration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeDataTableWebToken", "GetNumberOfSecondsUntilExpiration");

	Params::RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableWebToken.GetTokenText
// (Final, Native, Public, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableWebToken::GetTokenText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeDataTableWebToken", "GetTokenText");

	Params::RuntimeDataTableWebToken_GetTokenText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableWebToken.HasTokenExpired
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URuntimeDataTableWebToken::HasTokenExpired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeDataTableWebToken", "HasTokenExpired");

	Params::RuntimeDataTableWebToken_HasTokenExpired Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.AutoGenerateKeys
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> URuntimeDataTableObject::AutoGenerateKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "AutoGenerateKeys");

	Params::RuntimeDataTableObject_AutoGenerateKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.BuildGoogleSheetDownloadLinkAndGetAsCsv
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FRuntimeDataTableTokenInfo&InTokenInfo                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// const struct FRuntimeDataTableOperationParams&OperationParams                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FRuntimeDataTableCallbackInfo& CallbackInfo)>CallOnComplete                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InSheetURL                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bSheetIsPublic                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeDataTableObject::BuildGoogleSheetDownloadLinkAndGetAsCsv(const struct FRuntimeDataTableTokenInfo& InTokenInfo, const struct FRuntimeDataTableOperationParams& OperationParams, const TDelegate<void(const struct FRuntimeDataTableCallbackInfo& CallbackInfo)> CallOnComplete, const class FString& InSheetURL, const bool bSheetIsPublic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "BuildGoogleSheetDownloadLinkAndGetAsCsv");

	Params::RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv Parms{};

	Parms.InTokenInfo = std::move(InTokenInfo);
	Parms.OperationParams = std::move(OperationParams);
	Parms.CallOnComplete = CallOnComplete;
	Parms.InSheetURL = std::move(InSheetURL);
	Parms.bSheetIsPublic = bSheetIsPublic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GenerateCsvFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    ArrayToExport                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString*                          OutCSV_String                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              Keys                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    MembersToInclude                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bSortColumnsAlphanumerically                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    OwningObject                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeDataTableObject::GenerateCsvFromArray(const TArray<int32>& ArrayToExport, class FString* OutCSV_String, const TArray<class FName>& Keys, const class FString& MembersToInclude, const bool bSortColumnsAlphanumerically, const class UObject* OwningObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GenerateCsvFromArray");

	Params::RuntimeDataTableObject_GenerateCsvFromArray Parms{};

	Parms.ArrayToExport = std::move(ArrayToExport);
	Parms.Keys = std::move(Keys);
	Parms.MembersToInclude = std::move(MembersToInclude);
	Parms.bSortColumnsAlphanumerically = bSortColumnsAlphanumerically;
	Parms.OwningObject = OwningObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCSV_String != nullptr)
		*OutCSV_String = std::move(Parms.OutCSV_String);
}


// Function RuntimeDataTable.RuntimeDataTableObject.GenerateTokenInfoFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRuntimeDataTableTokenInfo*      OutTokenInfo                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// const class FString&                    InPathToFile                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             DesiredSecondsUntilExpiration                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URuntimeDataTableObject::GenerateTokenInfoFromFile(struct FRuntimeDataTableTokenInfo* OutTokenInfo, const class FString& InPathToFile, const int32 DesiredSecondsUntilExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GenerateTokenInfoFromFile");

	Params::RuntimeDataTableObject_GenerateTokenInfoFromFile Parms{};

	Parms.InPathToFile = std::move(InPathToFile);
	Parms.DesiredSecondsUntilExpiration = DesiredSecondsUntilExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTokenInfo != nullptr)
		*OutTokenInfo = std::move(Parms.OutTokenInfo);

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GenerateTokenInfoFromString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRuntimeDataTableTokenInfo*      OutTokenInfo                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// const class FString&                    InJsonString                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             DesiredSecondsUntilExpiration                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URuntimeDataTableObject::GenerateTokenInfoFromString(struct FRuntimeDataTableTokenInfo* OutTokenInfo, const class FString& InJsonString, const int32 DesiredSecondsUntilExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GenerateTokenInfoFromString");

	Params::RuntimeDataTableObject_GenerateTokenInfoFromString Parms{};

	Parms.InJsonString = std::move(InJsonString);
	Parms.DesiredSecondsUntilExpiration = DesiredSecondsUntilExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTokenInfo != nullptr)
		*OutTokenInfo = std::move(Parms.OutTokenInfo);

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetAllObjectPropertyNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeOnlyConfigVariables                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeInheritedVariables                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MemberDenylist                                         (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetAllObjectPropertyNames(const class UObject* Object, const bool bIncludeOnlyConfigVariables, const bool bIncludeInheritedVariables, const class FString& MemberDenylist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetAllObjectPropertyNames");

	Params::RuntimeDataTableObject_GetAllObjectPropertyNames Parms{};

	Parms.Object = Object;
	Parms.bIncludeOnlyConfigVariables = bIncludeOnlyConfigVariables;
	Parms.bIncludeInheritedVariables = bIncludeInheritedVariables;
	Parms.MemberDenylist = std::move(MemberDenylist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetAllObjectVariableNames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeOnlyConfigVariables                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeInheritedVariables                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MemberBlacklist                                        (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetAllObjectVariableNames(const class UObject* Object, const bool bIncludeOnlyConfigVariables, const bool bIncludeInheritedVariables, const class FString& MemberBlacklist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetAllObjectVariableNames");

	Params::RuntimeDataTableObject_GetAllObjectVariableNames Parms{};

	Parms.Object = Object;
	Parms.bIncludeOnlyConfigVariables = bIncludeOnlyConfigVariables;
	Parms.bIncludeInheritedVariables = bIncludeInheritedVariables;
	Parms.MemberBlacklist = std::move(MemberBlacklist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsApiUrlPrefix
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetGoogleSheetsApiUrlPrefix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetGoogleSheetsApiUrlPrefix");

	Params::RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsBatchUpdateURL
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    InSpreadsheetId                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetGoogleSheetsBatchUpdateURL(const class FString& InSpreadsheetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetGoogleSheetsBatchUpdateURL");

	Params::RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL Parms{};

	Parms.InSpreadsheetId = std::move(InSpreadsheetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsUrlPrefix
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetGoogleSheetsUrlPrefix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetGoogleSheetsUrlPrefix");

	Params::RuntimeDataTableObject_GetGoogleSheetsUrlPrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsValuesBatchUpdateURL
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    InSpreadsheetId                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetGoogleSheetsValuesBatchUpdateURL(const class FString& InSpreadsheetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetGoogleSheetsValuesBatchUpdateURL");

	Params::RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL Parms{};

	Parms.InSpreadsheetId = std::move(InSpreadsheetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetMimeCsv
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetMimeCsv()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetMimeCsv");

	Params::RuntimeDataTableObject_GetMimeCsv Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetSheetIdFromUrl
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SheetURL                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetSheetIdFromUrl(const class FString& SheetURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetSheetIdFromUrl");

	Params::RuntimeDataTableObject_GetSheetIdFromUrl Parms{};

	Parms.SheetURL = std::move(SheetURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetSheetIdFromUrl_Int
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SheetURL                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URuntimeDataTableObject::GetSheetIdFromUrl_Int(const class FString& SheetURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetSheetIdFromUrl_Int");

	Params::RuntimeDataTableObject_GetSheetIdFromUrl_Int Parms{};

	Parms.SheetURL = std::move(SheetURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.GetSpreadsheetIdFromUrl
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SheetURL                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeDataTableObject::GetSpreadsheetIdFromUrl(const class FString& SheetURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "GetSpreadsheetIdFromUrl");

	Params::RuntimeDataTableObject_GetSpreadsheetIdFromUrl Parms{};

	Parms.SheetURL = std::move(SheetURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.UpdateArrayFromCsvInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    ArrayToUpdate                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEasyCsvInfo&              CSVInfo                                                (Parm, NativeAccessSpecifierPublic)
// bool                                    MatchStructMemberNames                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    OwningObject                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeDataTableObject::UpdateArrayFromCsvInfo(const TArray<int32>& ArrayToUpdate, bool* Successful, const struct FEasyCsvInfo& CSVInfo, bool MatchStructMemberNames, const class UObject* OwningObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "UpdateArrayFromCsvInfo");

	Params::RuntimeDataTableObject_UpdateArrayFromCsvInfo Parms{};

	Parms.ArrayToUpdate = std::move(ArrayToUpdate);
	Parms.CSVInfo = std::move(CSVInfo);
	Parms.MatchStructMemberNames = MatchStructMemberNames;
	Parms.OwningObject = OwningObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;
}


// Function RuntimeDataTable.RuntimeDataTableObject.ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRuntimeDataTableCallbackInfo&InCallbackInfo                                         (ConstParm, Parm, NativeAccessSpecifierPublic)
// struct FEasyCsvInfo*                    OutCsvInfo                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// ERuntimeDataTableBackupResultCode*      OutResultCode                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BackupSavePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BackupLoadPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URuntimeDataTableObject::ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded(const struct FRuntimeDataTableCallbackInfo& InCallbackInfo, struct FEasyCsvInfo* OutCsvInfo, ERuntimeDataTableBackupResultCode* OutResultCode, const class FString& BackupSavePath, const class FString& BackupLoadPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded");

	Params::RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded Parms{};

	Parms.InCallbackInfo = std::move(InCallbackInfo);
	Parms.BackupSavePath = std::move(BackupSavePath);
	Parms.BackupLoadPath = std::move(BackupLoadPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCsvInfo != nullptr)
		*OutCsvInfo = std::move(Parms.OutCsvInfo);

	if (OutResultCode != nullptr)
		*OutResultCode = Parms.OutResultCode;

	return Parms.ReturnValue;
}


// Function RuntimeDataTable.RuntimeDataTableObject.WriteCsvToSheet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRuntimeDataTableTokenInfo&InTokenInfo                                            (Parm, NativeAccessSpecifierPublic)
// const struct FRuntimeDataTableOperationParams&OperationParams                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FRuntimeDataTableCallbackInfo& CallbackInfo)>&CallOnComplete                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InSpreadsheetId                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InSheetId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InCsv                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeDataTableObject::WriteCsvToSheet(const struct FRuntimeDataTableTokenInfo& InTokenInfo, const struct FRuntimeDataTableOperationParams& OperationParams, const TDelegate<void(const struct FRuntimeDataTableCallbackInfo& CallbackInfo)>& CallOnComplete, const class FString& InSpreadsheetId, const int32 InSheetId, const class FString& InCsv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeDataTableObject", "WriteCsvToSheet");

	Params::RuntimeDataTableObject_WriteCsvToSheet Parms{};

	Parms.InTokenInfo = std::move(InTokenInfo);
	Parms.OperationParams = std::move(OperationParams);
	Parms.CallOnComplete = CallOnComplete;
	Parms.InSpreadsheetId = std::move(InSpreadsheetId);
	Parms.InSheetId = InSheetId;
	Parms.InCsv = std::move(InCsv);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

