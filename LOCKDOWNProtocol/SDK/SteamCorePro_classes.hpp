#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamCorePro

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SteamCorePro_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SteamCoreShared_structs.hpp"


namespace SDK
{

// Class SteamCorePro.SteamCoreProAsyncAction
// 0x0000 (0x0030 - 0x0030)
class USteamCoreProAsyncAction : public UBlueprintAsyncActionBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProAsyncAction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProAsyncAction")
	}
	static class USteamCoreProAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProAsyncAction>();
	}
};
DUMPER7_ASSERTS_USteamCoreProAsyncAction;

// Class SteamCorePro.SteamCoreProAppsAsyncActionGetFileDetails
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProAppsAsyncActionGetFileDetails final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FFileDetailsResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProAppsAsyncActionGetFileDetails* GetFileDetailsAsync(class UObject* WorldContextObject, const class FString& Filename, float Timeout);

	void HandleCallback(const struct FFileDetailsResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProAppsAsyncActionGetFileDetails")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProAppsAsyncActionGetFileDetails")
	}
	static class USteamCoreProAppsAsyncActionGetFileDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProAppsAsyncActionGetFileDetails>();
	}
};
DUMPER7_ASSERTS_USteamCoreProAppsAsyncActionGetFileDetails;

// Class SteamCorePro.SteamCoreProGameMode
// 0x0000 (0x0388 - 0x0388)
class ASteamCoreProGameMode final : public AGameMode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProGameMode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProGameMode")
	}
	static class ASteamCoreProGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASteamCoreProGameMode>();
	}
};
DUMPER7_ASSERTS_ASteamCoreProGameMode;

// Class SteamCorePro.SteamCorePro
// 0x0000 (0x0028 - 0x0028)
class USteamCorePro final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCorePro")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCorePro")
	}
	static class USteamCorePro* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCorePro>();
	}
};
DUMPER7_ASSERTS_USteamCorePro;

// Class SteamCorePro.SteamCoreInterface
// 0x0000 (0x0028 - 0x0028)
class USteamCoreInterface : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreInterface")
	}
	static class USteamCoreInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreInterface>();
	}
};
DUMPER7_ASSERTS_USteamCoreInterface;

// Class SteamCorePro.SteamCoreProSubsystem
// 0x0020 (0x0048 - 0x0028)
class USteamCoreProSubsystem final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProSubsystem")
	}
	static class USteamCoreProSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProSubsystem>();
	}
};
DUMPER7_ASSERTS_USteamCoreProSubsystem;

// Class SteamCorePro.SteamProFriends
// 0x02D0 (0x02F8 - 0x0028)
class USteamProFriends final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FAvatarImageLoaded& Data)> AvatarImageLoaded;         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FFriendRichPresenceUpdate& Data)> FriendRichPresenceUpdate; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameConnectedChatJoin& Data)> GameConnectedChatJoin; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameConnectedChatLeave& Data)> GameConnectedChatLeave; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameConnectedClanChatMsg& Data)> GameConnectedClanChatMsg; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameConnectedFriendChatMsg& Data)> GameConnectedFriendChatMsg; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameLobbyJoinRequested& Data)> GameLobbyJoinRequested; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameOverlayActivated& Data)> GameOverlayActivated;   // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameRichPresenceJoinRequested& Data)> GameRichPresenceJoinRequested; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameServerChangeRequested& Data)> GameServerChangeRequested; // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FPersonaStateChange& Data)> PersonaStateChange;       // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FJoinClanChatRoomCompletionResult& Data)> JoinClanChatRoomCompletionResult; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FClanOfficerListResponse& Data)> ClanOfficerListResponse; // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDownloadClanActivityCountsResult& Data)> DownloadClanActivityCountsResult; // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FEquippedProfileItemsChanged& Data)> EquippedProfileItemsChanged; // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x1E0];                                    // 0x0118(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ActivateGameOverlay(const class FString& Dialog);
	static void ActivateGameOverlayInvitedialog(const struct FSteamID& SteamIDLobby);
	static void ActivateGameOverlayInviteDialogConnectString(const class FString& ConnectString);
	static void ActivateGameOverlayToStore(int32 AppID, ESteamOverlayToStoreFlag Flag);
	static void ActivateGameOverlayToUser(const class FString& Dialog, const struct FSteamID& SteamID);
	static void ActivateGameOverlayToWebPage(const class FString& URL, ESteamActivateGameOverlayToWebPageMode Mode);
	static bool BHasEquippedProfileItem(const struct FSteamID& SteamID, ESteamCommunityProfileItemType ItemType);
	static void ClearRichPresence();
	static bool CloseClanChatWindowInSteam(const struct FSteamID& SteamIDClanChat);
	static struct FSteamID GetChatMemberByIndex(const struct FSteamID& SteamIDClan, int32 User);
	static bool GetClanActivityCounts(const struct FSteamID& SteamIDClan, int32* Online, int32* InGame, int32* Chatting);
	static struct FSteamID GetClanByIndex(int32 Clan);
	static int32 GetClanChatMemberCount(const struct FSteamID& SteamIDClan);
	static int32 GetClanChatMessage(const struct FSteamID& SteamIDClanChat, int32 MessageID, class FString* Text, ESteamChatEntryType* ChatEntryType, struct FSteamID* SteamIDChatter);
	static int32 GetClanCount();
	static class FString GetClanName(const struct FSteamID& SteamIDClan);
	static struct FSteamID GetClanOfficerByIndex(const struct FSteamID& SteamIDClan, int32 Officer);
	static int32 GetClanOfficerCount(const struct FSteamID& SteamIDClan);
	static struct FSteamID GetClanOwner(const struct FSteamID& SteamIDClan);
	static class FString GetClanTag(const struct FSteamID& SteamIDClan);
	static struct FSteamID GetCoplayFriend(int32 CoplayFriend);
	static int32 GetCoplayFriendCount();
	static struct FSteamID GetFriendByIndex(int32 Ifriend, const TArray<ESteamFriendFlags>& Flags_0);
	static int32 GetFriendCoplayGame(const struct FSteamID& SteamIDFriend);
	static int32 GetFriendCoplayTime(const struct FSteamID& SteamIDFriend);
	static int32 GetFriendCount(const TArray<ESteamFriendFlags>& Flags_0);
	static int32 GetFriendCountFromSource(const struct FSteamID& SteamIDSource);
	static struct FSteamID GetFriendFromSourceByIndex(const struct FSteamID& SteamIDSource, int32 Ifriend);
	static bool GetFriendGamePlayed(const struct FSteamID& SteamIDFriend, struct FSteamGameID* GameID, class FString* GameIP, int32* ConnectionPort, int32* QueryPort, struct FSteamID* SteamIDLobby);
	static int32 GetFriendMessage(const struct FSteamID& SteamIDFriend, int32 MessageID, class FString* Text, ESteamChatEntryType* ChatEntryType);
	static class FString GetFriendPersonaName(const struct FSteamID& SteamIDFriend);
	static class FString GetFriendPersonaNameHistory(const struct FSteamID& SteamIDFriend, int32 PersonaName);
	static ESteamPersonaState GetFriendPersonaState(const struct FSteamID& SteamIDFriend);
	static ESteamFriendRelationship GetFriendRelationship(const struct FSteamID& SteamIDFriend);
	static class FString GetFriendRichPresence(const struct FSteamID& SteamIDFriend, const class FString& Key);
	static class FString GetFriendRichPresenceKeyByIndex(const struct FSteamID& SteamIDFriend, int32 Key);
	static int32 GetFriendRichPresenceKeyCount(const struct FSteamID& SteamIDFriend);
	static int32 GetFriendsGroupCount();
	static struct FSteamFriendsGroupID GetFriendsGroupIDByIndex(int32 FriendGroup);
	static int32 GetFriendsGroupMembersCount(const struct FSteamFriendsGroupID& FriendsGroupID);
	static void GetFriendsGroupMembersList(const struct FSteamFriendsGroupID& FriendsGroupID, TArray<struct FSteamID>* SteamIDMembers, int32 MembersCount);
	static class FString GetFriendsGroupName(const struct FSteamFriendsGroupID& FriendsGroupID);
	static int32 GetFriendSteamLevel(const struct FSteamID& SteamIDFriend);
	static class UTexture2D* GetLargeFriendAvatar(const struct FSteamID& SteamIDFriend);
	static class UTexture2D* GetMediumFriendAvatar(const struct FSteamID& SteamIDFriend);
	static class FString GetPersonaName();
	static class FString GetPersonaName_Pure();
	static ESteamPersonaState GetPersonaState();
	static ESteamPersonaState GetPersonaState_Pure();
	static class FString GetPlayerNickname(const struct FSteamID& SteamIDPlayer);
	static class FString GetPlayerNickname_Pure(const struct FSteamID& SteamIDPlayer);
	static class FString GetProfileItemPropertyString(const struct FSteamID& SteamID, ESteamCommunityProfileItemType ItemType, ESteamCommunityProfileItemProperty Prop);
	static int32 GetProfileItemPropertyUint(const struct FSteamID& SteamID, ESteamCommunityProfileItemType ItemType, ESteamCommunityProfileItemProperty Prop);
	static class UTexture2D* GetSmallFriendAvatar(const struct FSteamID& SteamIDFriend);
	static class USteamProFriends* GetSteamFriends();
	static bool HasFriend(const struct FSteamID& SteamIDFriend, const TArray<ESteamFriendFlags>& Flags_0);
	static bool InviteUserToGame(const struct FSteamID& SteamIDFriend, const class FString& ConnectString);
	static bool IsClanChatAdmin(const struct FSteamID& SteamIDClanChat, const struct FSteamID& SteamIDUser);
	static bool IsClanChatWindowOpenInSteam(const struct FSteamID& SteamIDClanChat);
	static bool IsClanOfficialGameGroup(const struct FSteamID& SteamIDClan);
	static bool IsClanPublic(const struct FSteamID& SteamIDClan);
	static bool IsUserInSource(const struct FSteamID& SteamIDUser, const struct FSteamID& SteamIDSource);
	static bool LeaveClanChatRoom(const struct FSteamID& SteamIDClan);
	static bool OpenClanChatWindowInSteam(const struct FSteamID& SteamIDClanChat);
	static bool RegisterProtocolInOverlayBrowser(const class FString& Protocol);
	static bool ReplyToFriendMessage(const struct FSteamID& SteamIDFriend, const class FString& MsgToSend);
	static void RequestFriendRichPresence(const struct FSteamID& SteamIDFriend);
	static bool RequestUserInformation(const struct FSteamID& SteamIDUser, bool bRequireNameOnly);
	static bool SendClanChatMessage(const struct FSteamID& SteamIDClanChat, const class FString& Text);
	static void SetInGameVoiceSpeaking(const struct FSteamID& SteamIDUser, bool bSpeaking);
	static bool SetListenForFriendsMessages(bool bInterceptEnabled);
	static void SetPlayedWith(const struct FSteamID& SteamIDUserPlayedWith);
	static bool SetRichPresence(const class FString& Key, const class FString& Value);

	void DownloadClanActivityCounts(const TDelegate<void(const struct FDownloadClanActivityCountsResult& Data, bool bWasSuccessful)>& Callback, const TArray<struct FSteamID>& SteamIDClans);
	void EnumerateFollowingList(const TDelegate<void(const struct FFriendsEnumerateFollowingList& Data, bool bWasSuccessful)>& Callback, int32 StartIndex);
	void GetFollowerCount(const TDelegate<void(const struct FFriendsGetFollowerCount& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamID);
	void IsFollowing(const TDelegate<void(const struct FFriendsIsFollowing& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamID);
	void JoinClanChatRoom(const TDelegate<void(const struct FJoinClanChatRoomCompletionResult& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDClan);
	void RequestClanOfficerList(const TDelegate<void(const struct FClanOfficerListResponse& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDClan);
	void RequestEquippedProfileItems(const TDelegate<void(const struct FEquippedProfileItems& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProFriends")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProFriends")
	}
	static class USteamProFriends* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProFriends>();
	}
};
DUMPER7_ASSERTS_USteamProFriends;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionDownloadClanActivityCounts
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProFriendsAsyncActionDownloadClanActivityCounts final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FDownloadClanActivityCountsResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProFriendsAsyncActionDownloadClanActivityCounts* DownloadClanActivityCountsAsync(class UObject* WorldContextObject, const TArray<struct FSteamID>& SteamIDClans, float Timeout);

	void HandleCallback(const struct FDownloadClanActivityCountsResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionDownloadClanActivityCounts")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionDownloadClanActivityCounts")
	}
	static class USteamCoreProFriendsAsyncActionDownloadClanActivityCounts* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionDownloadClanActivityCounts>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionDownloadClanActivityCounts;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionRequestClanOfficerList
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProFriendsAsyncActionRequestClanOfficerList final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FClanOfficerListResponse& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProFriendsAsyncActionRequestClanOfficerList* RequestClanOfficerListAsync(class UObject* WorldContextObject, const struct FSteamID& SteamIDClan, float Timeout);

	void HandleCallback(const struct FClanOfficerListResponse& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionRequestClanOfficerList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionRequestClanOfficerList")
	}
	static class USteamCoreProFriendsAsyncActionRequestClanOfficerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionRequestClanOfficerList>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionRequestClanOfficerList;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionJoinClanChatRoom
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProFriendsAsyncActionJoinClanChatRoom final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FJoinClanChatRoomCompletionResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProFriendsAsyncActionJoinClanChatRoom* JoinClanChatRoomAsync(class UObject* WorldContextObject, const struct FSteamID& SteamIDClan, float Timeout);

	void HandleCallback(const struct FJoinClanChatRoomCompletionResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionJoinClanChatRoom")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionJoinClanChatRoom")
	}
	static class USteamCoreProFriendsAsyncActionJoinClanChatRoom* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionJoinClanChatRoom>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionJoinClanChatRoom;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionEnumerateFollowingList
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProFriendsAsyncActionEnumerateFollowingList final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FFriendsEnumerateFollowingList& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProFriendsAsyncActionEnumerateFollowingList* EnumerateFollowingListAsync(class UObject* WorldContextObject, int32 StartIndex, float Timeout);

	void HandleCallback(const struct FFriendsEnumerateFollowingList& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionEnumerateFollowingList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionEnumerateFollowingList")
	}
	static class USteamCoreProFriendsAsyncActionEnumerateFollowingList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionEnumerateFollowingList>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionEnumerateFollowingList;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionIsFollowing
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProFriendsAsyncActionIsFollowing final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FFriendsIsFollowing& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProFriendsAsyncActionIsFollowing* IsFollowingAsync(class UObject* WorldContextObject, const struct FSteamID& SteamID, float Timeout);

	void HandleCallback(const struct FFriendsIsFollowing& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionIsFollowing")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionIsFollowing")
	}
	static class USteamCoreProFriendsAsyncActionIsFollowing* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionIsFollowing>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionIsFollowing;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionGetFollowerCount
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProFriendsAsyncActionGetFollowerCount final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FFriendsGetFollowerCount& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProFriendsAsyncActionGetFollowerCount* GetFollowerCountAsync(class UObject* WorldContextObject, const struct FSteamID& SteamID, float Timeout);

	void HandleCallback(const struct FFriendsGetFollowerCount& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionGetFollowerCount")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionGetFollowerCount")
	}
	static class USteamCoreProFriendsAsyncActionGetFollowerCount* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionGetFollowerCount>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionGetFollowerCount;

// Class SteamCorePro.SteamCoreProFriendsAsyncActionRequestUserInformation
// 0x0040 (0x0070 - 0x0030)
class USteamCoreProFriendsAsyncActionRequestUserInformation final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void()>              OnCallback;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamCoreProFriendsAsyncActionRequestUserInformation* RequestUserInformationAsync(class UObject* WorldContextObject, const struct FSteamID& SteamIDUser, bool bRequireNameOnly, float Timeout);

	void HandleCallback();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFriendsAsyncActionRequestUserInformation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFriendsAsyncActionRequestUserInformation")
	}
	static class USteamCoreProFriendsAsyncActionRequestUserInformation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFriendsAsyncActionRequestUserInformation>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFriendsAsyncActionRequestUserInformation;

// Class SteamCorePro.SteamProGameServerStats
// 0x0030 (0x0058 - 0x0028)
class USteamProGameServerStats final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FGSStatsUnloaded& Data)> GSStatsUnloaded;             // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamProGameServerStats* GetSteamGameServerStats();

	bool ClearUserAchievement(const struct FSteamID& SteamIDUser, const class FString& Name_0);
	bool GetUserAchievement(const struct FSteamID& SteamIDUser, const class FString& Name_0, bool* bAchieved);
	bool GetUserStatFloat(const struct FSteamID& SteamIDUser, const class FString& Name_0, float* Data);
	bool GetUserStatInt(const struct FSteamID& SteamIDUser, const class FString& Name_0, int32* Data);
	void ServerRequestUserStats(const TDelegate<void(const struct FGSStatsReceived& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDUser);
	void ServerStoreUserStats(const TDelegate<void(const struct FGSStatsStored& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDUser);
	bool SetUserAchievement(const struct FSteamID& SteamIDUser, const class FString& Name_0);
	bool SetUserStatFloat(const struct FSteamID& SteamIDUser, const class FString& Name_0, float Data);
	bool SetUserStatInt(const struct FSteamID& SteamIDUser, const class FString& Name_0, int32 Data);
	bool UpdateUserAvgRateStat(const struct FSteamID& SteamIDUser, const class FString& Name_0, float CountThisSession, float SessionLength);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProGameServerStats")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProGameServerStats")
	}
	static class USteamProGameServerStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProGameServerStats>();
	}
};
DUMPER7_ASSERTS_USteamProGameServerStats;

// Class SteamCorePro.SteamProInput
// 0x0050 (0x0078 - 0x0028)
class USteamProInput final : public USteamCoreInterface
{
public:
	TMap<int32, class FString>                    InputActionOrigin;                                 // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)

public:
	static bool BNewDataAvailable();
	static bool BWaitForData(bool bWaitForever, int32 Timeout);
	static TArray<ESteamCoreInputConfigurationEnableType> GetSessionInputConfigurationSettings();
	static class USteamProInput* GetSteamInput();
	static class FString GetStringForAnalogActionName(const struct FInputAnalogActionHandle& ActionHandle);
	static class FString GetStringForDigitalActionName(const struct FInputDigitalActionHandle& ActionHandle);
	static void SetDualSenseTriggerEffect(const struct FInputHandle& InputHandle, const struct FScePadTriggerEffectCommand& R2, const struct FScePadTriggerEffectCommand& L2);

	void ActivateActionSet(const struct FInputHandle& Handle, const struct FInputActionSetHandle& ActionSetHandle);
	void ActivateActionSetLayer(const struct FInputHandle& Handle, const struct FInputActionSetHandle& ActionSetLayerHandle);
	void DeactivateActionSetLayer(const struct FInputHandle& Handle, const struct FInputActionSetHandle& ActionSetLayerHandle);
	void DeactivateAllActionSetLayers(const struct FInputHandle& Handle);
	int32 GetActionOriginFromXboxOrigin(const struct FInputHandle& Handle, ESteamCoreProXboxOrigin Origin);
	struct FInputActionSetHandle GetActionSetHandle(const class FString& ActionSetName);
	int32 GetActiveActionSetLayers(const struct FInputHandle& Handle, TArray<struct FInputActionSetHandle>* Data);
	struct FInputAnalogActionData GetAnalogActionData(const struct FInputHandle& Handle, const struct FInputAnalogActionHandle& AnalogActionHandle);
	struct FInputAnalogActionHandle GetAnalogActionHandle(const class FString& PszActionName);
	int32 GetAnalogActionOrigins(const struct FInputHandle& Handle, const struct FInputActionSetHandle& ActionSetHandle, const struct FInputAnalogActionHandle& AnalogActionHandle, TArray<int32>* OriginsOut);
	int32 GetConnectedControllers(TArray<struct FInputHandle>* OutHandles);
	struct FInputHandle GetControllerForGamepadIndex(int32 Index_0);
	struct FInputActionSetHandle GetCurrentActionSet(const struct FInputHandle& Handle);
	bool GetDeviceBindingRevision(const struct FInputHandle& Handle, int32* Major, int32* Minor);
	struct FInputDigitalActionData GetDigitalActionData(const struct FInputHandle& Handle, const struct FInputDigitalActionHandle& DigitalActionHandle);
	struct FInputDigitalActionHandle GetDigitalActionHandle(const class FString& PszActionName);
	int32 GetDigitalActionOrigins(const struct FInputHandle& Handle, const struct FInputActionSetHandle& ActionSetHandle, const struct FInputDigitalActionHandle& DigitalActionHandle, TArray<int32>* OriginsOut);
	int32 GetGamepadIndexForController(const struct FInputHandle& Handle);
	class FString GetGlyphForActionOrigin_Legacy(int32 Origin);
	class FString GetGlyphForXboxOrigin(ESteamCoreProXboxOrigin Origin);
	class FString GetGlyphPNGForActionOrigin(int32 Origin, ESteamCoreProInputGlyphSize Size, int32 Flags_0);
	class FString GetGlyphSVGForActionOrigin(int32 Origin, int32 Flags_0);
	int32 GetInputActionOriginAsInteger(const class FString& Value);
	class FString GetInputActionOriginAsString(int32 ID);
	TArray<class FString> GetInputActionOrigins();
	ESteamCoreProInputType GetInputTypeForHandle(const struct FInputHandle& Handle);
	struct FInputMotionData GetMotionData(const struct FInputHandle& Handle);
	int32 GetRemotePlaySessionID(const struct FInputHandle& Handle);
	class FString GetStringForActionOrigin(int32 Origin);
	class FString GetStringForXboxOrigin(ESteamCoreProXboxOrigin Origin);
	bool Init();
	void Legacy_TriggerHapticPulse(const struct FInputHandle& Handle, ESteamCoreProControllerPad TargetPad, float DurationMicroSec);
	void Legacy_TriggerRepeatedHapticPulse(const struct FInputHandle& Handle, ESteamCoreProControllerPad TargetPad, float DurationMicroSec, float OffMicroSec, int32 Repeat, uint8 Flags_0);
	bool SetInputActionManifestFilePath(const class FString& InputActionManifestAbsolutePath);
	void SetLEDColor(const struct FInputHandle& Handle, uint8 ColorR, uint8 ColorG, uint8 ColorB, ESteamCoreProInputLEDFlag Flags_0);
	bool ShowBindingPanel(const struct FInputHandle& Handle);
	bool Shutdown();
	void StopAnalogActionMomentum(const struct FInputHandle& Handle, const struct FInputAnalogActionHandle& EAction);
	int32 TranslateActionOrigin(ESteamCoreProInputType DestinationInputType, int32 SourceOrigin);
	void TriggerVibration(const struct FInputHandle& Handle, float LeftSpeed, float RightSpeed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProInput")
	}
	static class USteamProInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProInput>();
	}
};
DUMPER7_ASSERTS_USteamProInput;

// Class SteamCorePro.SteamProInventory
// 0x0120 (0x0148 - 0x0028)
class USteamProInventory final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FSteamInventoryResultReady& Data)> SteamInventoryResultReady; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SteamInventoryDefinitionUpdate;                    // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamInventoryFullUpdate& Data)> SteamInventoryFullUpdate; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamInventoryStartPurchaseResult& Data)> SteamInventoryStartPurchaseResult; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamInventoryRequestPricesResult& Data)> SteamInventoryRequestPricesResultDelegate; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamInventoryEligiblePromoItemDefIDs& Data)> SteamInventoryEligiblePromoItemDefIDs; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0xC0];                                      // 0x0088(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool AddPromoItem(struct FSteamInventoryResult* Result, const struct FSteamItemDef& ItemDef);
	static bool AddPromoItems(struct FSteamInventoryResult* OutResult, const TArray<struct FSteamItemDef>& ItemDefs);
	static bool CheckResultSteamID(const struct FSteamInventoryResult& Handle, const struct FSteamID& SteamIDExpected);
	static bool ConsumeItem(struct FSteamInventoryResult* Result, const struct FSteamItemInstanceID& ItemConsume, int32 Quantity);
	static bool DeserializeResult(struct FSteamInventoryResult* Result, const TArray<uint8>& Buffer, bool bReservedMustBeFalse);
	static void DestroyResult(const struct FSteamInventoryResult& Handle);
	static bool ExchangeItems(struct FSteamInventoryResult* Result, const TArray<struct FSteamItemDef>& ArrayGenerate, const TArray<int32>& ArrayGenerateQuantity, const TArray<struct FSteamItemInstanceID>& ArrayDestroy, const TArray<int32>& ArrayDestroyQuantity);
	static bool GenerateItems(struct FSteamInventoryResult* Result, const TArray<struct FSteamItemDef>& ItemDefs, const TArray<int32>& Quantity);
	static bool GetAllItems(struct FSteamInventoryResult* Handle);
	static bool GetEligiblePromoItemDefinitionIDs(const struct FSteamID& SteamID, TArray<struct FSteamItemDef>* ItemDefs);
	static bool GetItemDefinitionIDs(TArray<struct FSteamItemDef>* ItemDefs);
	static bool GetItemDefinitionProperty(const struct FSteamItemDef& ItemDef, const class FString& PropertyName, class FString* Value);
	static bool GetItemPrice(const struct FSteamItemDef& ItemDef, int32* Price, int32* BasePrice);
	static bool GetItemsByID(struct FSteamInventoryResult* InventoryResult, const TArray<struct FSteamItemInstanceID>& InstanceIDs);
	static bool GetItemsWithPrices(TArray<struct FSteamItemDef>* ItemDefs, TArray<int32>* Prices, TArray<int32>* BasePrices);
	static int32 GetNumItemsWithPrices();
	static bool GetResultItemProperty(const struct FSteamInventoryResult& Handle, int32 ItemIndex, const class FString& PropertyName, class FString* Value);
	static bool GetResultItems(const struct FSteamInventoryResult& Handle, TArray<struct FSteamItemDetails>* Items);
	static ESteamResult GetResultStatus(const struct FSteamInventoryResult& Handle);
	static int32 GetResultTimestamp(const struct FSteamInventoryResult& Handle);
	static class USteamProInventory* GetSteamInventory();
	static bool GrantPromoItems(struct FSteamInventoryResult* Result);
	static bool LoadItemDefinitions();
	static bool RemoveProperty(const struct FSteamInventoryUpdateHandle& Handle, const struct FSteamItemInstanceID& ItemId, const class FString& PropertyName);
	static bool SerializeResult(const struct FSteamInventoryResult& Handle, TArray<uint8>* Buffer);
	static bool SetPropertyBool(const struct FSteamInventoryUpdateHandle& Handle, const struct FSteamItemInstanceID& ItemId, const class FString& PropertyName, bool bValue);
	static bool SetPropertyFloat(const struct FSteamInventoryUpdateHandle& Handle, const struct FSteamItemInstanceID& ItemId, const class FString& PropertyName, float Value);
	static bool SetPropertyInt(const struct FSteamInventoryUpdateHandle& Handle, const struct FSteamItemInstanceID& ItemId, const class FString& PropertyName, int32 Value);
	static bool SetPropertyString(const struct FSteamInventoryUpdateHandle& Handle, const struct FSteamItemInstanceID& ItemId, const class FString& PropertyName, const class FString& Value);
	static struct FSteamInventoryUpdateHandle StartUpdateProperties();
	static bool SubmitUpdateProperties(const struct FSteamInventoryUpdateHandle& Handle, struct FSteamInventoryResult* ResultHandle);
	static bool TransferItemQuantity(struct FSteamInventoryResult* Result, const struct FSteamItemInstanceID& ItemIDSource, int32 Quantity, const struct FSteamItemInstanceID& ItemIDDest);
	static bool TriggerItemDrop(struct FSteamInventoryResult* Result, const struct FSteamItemDef& ListDefinition);

	void RequestEligiblePromoItemDefinitionsIDs(const TDelegate<void(const struct FSteamInventoryEligiblePromoItemDefIDs& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamID);
	void RequestPrices(const TDelegate<void(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful)>& Callback);
	void StartPurchase(const TDelegate<void(const struct FSteamInventoryStartPurchaseResult& Data, bool bWasSuccessful)>& Callback, const TArray<struct FSteamItemDef>& ItemDefs, const TArray<int32>& Quantity);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProInventory")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProInventory")
	}
	static class USteamProInventory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProInventory>();
	}
};
DUMPER7_ASSERTS_USteamProInventory;

// Class SteamCorePro.SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FSteamInventoryEligiblePromoItemDefIDs& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs* RequestEligiblePromoItemDefinitionsIDsAsync(class UObject* WorldContextObject, const struct FSteamID& SteamID, float Timeout);

	void HandleCallback(const struct FSteamInventoryEligiblePromoItemDefIDs& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs")
	}
	static class USteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs>();
	}
};
DUMPER7_ASSERTS_USteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs;

// Class SteamCorePro.SteamCoreProInventoryAsyncActionRequestPricesResult
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProInventoryAsyncActionRequestPricesResult final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProInventoryAsyncActionRequestPricesResult* RequestPricesAsync(class UObject* WorldContextObject, float Timeout);

	void HandleCallback(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProInventoryAsyncActionRequestPricesResult")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProInventoryAsyncActionRequestPricesResult")
	}
	static class USteamCoreProInventoryAsyncActionRequestPricesResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProInventoryAsyncActionRequestPricesResult>();
	}
};
DUMPER7_ASSERTS_USteamCoreProInventoryAsyncActionRequestPricesResult;

// Class SteamCorePro.SteamCoreProInventoryAsyncActionStartPurchaseResult
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProInventoryAsyncActionStartPurchaseResult final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FSteamInventoryStartPurchaseResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProInventoryAsyncActionStartPurchaseResult* StartPurchaseAsync(class UObject* WorldContextObject, const TArray<struct FSteamItemDef>& ItemDefs, const TArray<int32>& Quantity, float Timeout);

	void HandleCallback(const struct FSteamInventoryStartPurchaseResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProInventoryAsyncActionStartPurchaseResult")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProInventoryAsyncActionStartPurchaseResult")
	}
	static class USteamCoreProInventoryAsyncActionStartPurchaseResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProInventoryAsyncActionStartPurchaseResult>();
	}
};
DUMPER7_ASSERTS_USteamCoreProInventoryAsyncActionStartPurchaseResult;

// Class SteamCorePro.SteamProMatchmaking
// 0x01B0 (0x01D8 - 0x0028)
class USteamProMatchmaking final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FFavoritesListAccountsUpdated& Data)> FavoritesListAccountsUpdated; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FFavoritesListChanged& Data)> FavoritesListChanged;   // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyChatMsg& Data)> LobbyChatMsg;                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyChatUpdate& Data)> LobbyChatUpdate;             // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyDataUpdate& Data)> LobbyDataUpdate;             // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyEnterData& Data)> LobbyEnter;                   // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyGameCreated& Data)> LobbyGameCreated;           // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyInviteData& Data)> LobbyInvite;                 // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyKickedData& Data)> LobbyKicked;                 // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x120];                                     // 0x00B8(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 AddFavoriteGame(int32 AppID, const class FString& IP, int32 ConnectionPort, int32 QueryPort, const TArray<ESteamFavoriteFlags>& Flags_0, int32 TimeLastPlayedOnServer);
	static void AddRequestLobbyListCompatibleMembersFilter(const struct FSteamID& SteamIDLobby);
	static void AddRequestLobbyListDistanceFilter(ESteamLobbyDistanceFilter LobbyDistanceFilter);
	static void AddRequestLobbyListFilterSlotsAvailable(int32 SlotsAvailable);
	static void AddRequestLobbyListNearValueFilter(const class FString& KeyToMatch, int32 ValueToBeCloseTo);
	static void AddRequestLobbyListNumericalFilter(const class FString& KeyToMatch, int32 ValueToMatch, ESteamLobbyComparison ComparisonType);
	static void AddRequestLobbyListResultCountFilter(int32 MaxResults);
	static void AddRequestLobbyListStringFilter(const class FString& KeyToMatch, const class FString& ValueToMatch, ESteamLobbyComparison ComparisonType);
	static bool DeleteLobbyData(const struct FSteamID& SteamIDLobby, const class FString& Key);
	static bool GetFavoriteGame(int32 Game, int32* AppID, class FString* IP, int32* ConnectionPort, int32* QueryPort, TArray<ESteamFavoriteFlags>* Flags_0, int32* TimeLastPlayedOnServer);
	static int32 GetFavoriteGameCount();
	static struct FSteamID GetLobbyByIndex(int32 Lobby);
	static int32 GetLobbyChatEntry(const struct FSteamID& SteamIDLobby, int32 MessageID, struct FSteamID* SteamIDUser, class FString* Message, ESteamChatEntryType* ChatEntryType);
	static class FString GetLobbyData(const struct FSteamID& SteamIDLobby, const class FString& Key);
	static bool GetLobbyDataByIndex(const struct FSteamID& SteamIDLobby, int32 LobbyData, class FString* Key, class FString* Value);
	static int32 GetLobbyDataCount(const struct FSteamID& SteamIDLobby);
	static bool GetLobbyGameServer(const struct FSteamID& SteamIDLobby, class FString* GameServerIP, int32* GameServerPort, struct FSteamID* SteamIDGameServer);
	static struct FSteamID GetLobbyMemberByIndex(const struct FSteamID& SteamIDLobby, int32 Member);
	static class FString GetLobbyMemberData(const struct FSteamID& SteamIDLobby, const struct FSteamID& SteamIDUser, const class FString& Key);
	static int32 GetLobbyMemberLimit(const struct FSteamID& SteamIDLobby);
	static struct FSteamID GetLobbyOwner(const struct FSteamID& SteamIDLobby);
	static int32 GetNumLobbyMembers(const struct FSteamID& SteamIDLobby);
	static class USteamProMatchmaking* GetSteamMatchmaking();
	static bool InviteUserToLobby(const struct FSteamID& SteamIDLobby, const struct FSteamID& SteamIDInvitee);
	static bool KickLobbyMember(const struct FSteamID& LobbyID, const struct FSteamID& PlayerToKick);
	static void LeaveLobby(const struct FSteamID& SteamIDLobby);
	static bool RemoveFavoriteGame(int32 AppID, const class FString& IP, int32 ConnectionPort, int32 QueryPort, const TArray<ESteamFavoriteFlags>& Flags_0);
	static bool RequestLobbyData(const struct FSteamID& SteamIDLobby);
	static bool SendLobbyChatMsg(const struct FSteamID& SteamIDLobby, const class FString& Message);
	static bool SetLinkedLobby(const struct FSteamID& SteamIDLobby, const struct FSteamID& SteamIDLobbyDependent);
	static bool SetLobbyData(const struct FSteamID& SteamIDLobby, const class FString& Key, const class FString& Value);
	static void SetLobbyGameServer(const struct FSteamID& SteamIDLobby, const class FString& GameServerIP, int32 GameServerPort, const struct FSteamID& SteamIDGameServer);
	static bool SetLobbyJoinable(const struct FSteamID& SteamIDLobby, bool bLobbyJoinable);
	static void SetLobbyMemberData(const struct FSteamID& SteamIDLobby, const class FString& Key, const class FString& Value);
	static bool SetLobbyMemberLimit(const struct FSteamID& SteamIDLobby, int32 MaxMembers);
	static bool SetLobbyOwner(const struct FSteamID& SteamIDLobby, const struct FSteamID& SteamIDNewOwner);
	static bool SetLobbyType(const struct FSteamID& SteamIDLobby, ESteamLobbyType LobbyType);

	void CreateLobby(const TDelegate<void(const struct FCreateLobbyData& Data, bool bWasSuccessful)>& Callback, ESteamLobbyType LobbyType, int32 MaxMembers);
	void JoinLobby(const TDelegate<void(const struct FJoinLobbyData& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDLobby);
	void RequestLobbyList(const TDelegate<void(const struct FLobbyMatchList& Data, bool bWasSuccessful)>& Callback);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProMatchmaking")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProMatchmaking")
	}
	static class USteamProMatchmaking* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProMatchmaking>();
	}
};
DUMPER7_ASSERTS_USteamProMatchmaking;

// Class SteamCorePro.SteamCoreProMatchmakingAsyncActionCreateLobby
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProMatchmakingAsyncActionCreateLobby final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FCreateLobbyData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProMatchmakingAsyncActionCreateLobby* CreateLobbyAsync(class UObject* WorldContextObject, ESteamLobbyType LobbyType, int32 MaxMembers, float Timeout);

	void HandleCallback(const struct FCreateLobbyData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProMatchmakingAsyncActionCreateLobby")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProMatchmakingAsyncActionCreateLobby")
	}
	static class USteamCoreProMatchmakingAsyncActionCreateLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProMatchmakingAsyncActionCreateLobby>();
	}
};
DUMPER7_ASSERTS_USteamCoreProMatchmakingAsyncActionCreateLobby;

// Class SteamCorePro.SteamCoreProMatchmakingAsyncActionRequestLobbyList
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProMatchmakingAsyncActionRequestLobbyList final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FLobbyMatchList& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProMatchmakingAsyncActionRequestLobbyList* RequestLobbyListAsync(class UObject* WorldContextObject, float Timeout);

	void HandleCallback(const struct FLobbyMatchList& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProMatchmakingAsyncActionRequestLobbyList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProMatchmakingAsyncActionRequestLobbyList")
	}
	static class USteamCoreProMatchmakingAsyncActionRequestLobbyList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProMatchmakingAsyncActionRequestLobbyList>();
	}
};
DUMPER7_ASSERTS_USteamCoreProMatchmakingAsyncActionRequestLobbyList;

// Class SteamCorePro.SteamCoreProMatchmakingAsyncActionJoinLobby
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProMatchmakingAsyncActionJoinLobby final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FJoinLobbyData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProMatchmakingAsyncActionJoinLobby* JoinLobbyAsync(class UObject* WorldContextObject, const struct FSteamID& SteamIDLobby, float Timeout);

	void HandleCallback(const struct FJoinLobbyData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProMatchmakingAsyncActionJoinLobby")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProMatchmakingAsyncActionJoinLobby")
	}
	static class USteamCoreProMatchmakingAsyncActionJoinLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProMatchmakingAsyncActionJoinLobby>();
	}
};
DUMPER7_ASSERTS_USteamCoreProMatchmakingAsyncActionJoinLobby;

// Class SteamCorePro.SteamCoreProCreateSession
// 0x0120 (0x0150 - 0x0030)
class USteamCoreProCreateSession final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x100];                                     // 0x0050(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamCoreProCreateSession* CreateSteamCoreProSession(class UObject* WorldContextObject, const TMap<class FString, struct FSteamSessionSetting>& SessionSettings, const class FString& SessionPassword, const class FString& SessionName, int32 MaxPlayers, bool bUseLAN, bool bAllowInvites, bool bUsesPresence, bool bAllowJoinViaPresence, bool bAllowJoinViaPresenceFriendsOnly, bool bAntiCheatProtected, bool bUsesStats, bool bShouldAdvertise, bool bUseLobbiesVoiceChatIfAvailable, float Timeout);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProCreateSession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProCreateSession")
	}
	static class USteamCoreProCreateSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProCreateSession>();
	}
};
DUMPER7_ASSERTS_USteamCoreProCreateSession;

// Class SteamCorePro.SteamCoreProFindSession
// 0x00A8 (0x00D8 - 0x0030)
class USteamCoreProFindSession final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FSteamSessionResult>& Results)> OnCallback;    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x98];                                      // 0x0040(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamCoreProFindSession* FindSteamCoreProSessions(class UObject* WorldContextObject, const TMap<class FString, struct FSteamSessionSearchSetting>& SearchSettings, int32 MaxResults, bool bUseLAN, ESteamSessionFindType ServerType, ESteamLobbyDistanceFilter DistanceFilter, bool bEmptyServersOnly, bool bSecureServersOnly, float Timeout);

	void OnCompleted(bool bSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProFindSession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProFindSession")
	}
	static class USteamCoreProFindSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProFindSession>();
	}
};
DUMPER7_ASSERTS_USteamCoreProFindSession;

// Class SteamCorePro.SteamCoreProJoinSession
// 0x0178 (0x01A8 - 0x0030)
class USteamCoreProJoinSession final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const class FString& JoinFailReason)> OnSuccess;                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& JoinFailReason)> OnFailure;                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x150];                                     // 0x0050(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                m_WorldContextObject;                              // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class USteamCoreProJoinSession* JoinSteamCoreProSession(class UObject* WorldContextObject, class APlayerController* PlayerController, const class FString& SessionPassword, const struct FBlueprintSessionResult& SearchResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProJoinSession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProJoinSession")
	}
	static class USteamCoreProJoinSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProJoinSession>();
	}
};
DUMPER7_ASSERTS_USteamCoreProJoinSession;

// Class SteamCorePro.SteamCoreProDestroySession
// 0x0040 (0x0070 - 0x0030)
class USteamCoreProDestroySession final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamCoreProDestroySession* DestroySteamCoreProSession(class UObject* WorldContextObject, float Timeout);

	void OnCompleted(class FName SessionName, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProDestroySession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProDestroySession")
	}
	static class USteamCoreProDestroySession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProDestroySession>();
	}
};
DUMPER7_ASSERTS_USteamCoreProDestroySession;

// Class SteamCorePro.SteamCoreProUpdateSession
// 0x0030 (0x0060 - 0x0030)
class USteamCoreProUpdateSession final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void()>              OnCallback;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                m_WorldContextObject;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamCoreProUpdateSession* UpdateSteamCoreProSession(class UObject* WorldContextObject, const TMap<class FString, struct FSteamSessionSetting>& Settings, const class FString& SessionName, int32 MaxPlayers, bool bAllowJoinInProgress);

	void OnCompleted(class FName SessionName, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUpdateSession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUpdateSession")
	}
	static class USteamCoreProUpdateSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUpdateSession>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUpdateSession;

// Class SteamCorePro.SteamProMatchmakingServers
// 0x0000 (0x0028 - 0x0028)
class USteamProMatchmakingServers final : public USteamCoreInterface
{
public:
	static class USteamProMatchmakingServers* GetSteamMatchmakingServers();

	void PingServer(const TDelegate<void(const struct FGameServerItem& Data, bool bWasSuccessful)>& Callback, const class FString& IP, int32 QueryPort);
	void RequestFavoritesServerList(const TDelegate<void(const struct FGameServerItem& Data)>& ServerCallback, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	void RequestFriendsServerList(const TDelegate<void(const struct FGameServerItem& Data)>& ServerCallback, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	void RequestHistoryServerList(const TDelegate<void(const struct FGameServerItem& Data)>& ServerCallback, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	void RequestInternetServerList(const TDelegate<void(const struct FGameServerItem& Data)>& ServerCallback, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	void RequestLANServerList(const TDelegate<void(const struct FGameServerItem& Data)>& ServerCallback, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	void RequestSpectatorServerList(const TDelegate<void(const struct FGameServerItem& Data)>& ServerCallback, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	void ServerRules(const TDelegate<void(const TArray<struct FGameServerRule>& Data, bool bWasSuccessful)>& Callback, const class FString& IP, int32 QueryPort);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProMatchmakingServers")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProMatchmakingServers")
	}
	static class USteamProMatchmakingServers* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProMatchmakingServers>();
	}
};
DUMPER7_ASSERTS_USteamProMatchmakingServers;

// Class SteamCorePro.SteamCoreProMatchmakingServersAsyncActionPingServer
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProMatchmakingServersAsyncActionPingServer final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FGameServerItem& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void CancelPingQueries(class UObject* WorldContextObject);
	static class USteamCoreProMatchmakingServersAsyncActionPingServer* PingServerAsync(class UObject* WorldContextObject, const class FString& IP, int32 Port, float Timeout);

	void HandleCallback(const struct FGameServerItem& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProMatchmakingServersAsyncActionPingServer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProMatchmakingServersAsyncActionPingServer")
	}
	static class USteamCoreProMatchmakingServersAsyncActionPingServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProMatchmakingServersAsyncActionPingServer>();
	}
};
DUMPER7_ASSERTS_USteamCoreProMatchmakingServersAsyncActionPingServer;

// Class SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList
// 0x0020 (0x0050 - 0x0030)
class USteamCoreProMatchmakingServersAsyncActionRequestServerList final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FGameServerItem& Data)> OnCallback;                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRefreshCompleted;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void CancelServerListQueries(class UObject* WorldContextObject);
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* RequestFavoritesServerListAsync(class UObject* WorldContextObject, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* RequestFriendsServerListAsync(class UObject* WorldContextObject, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* RequestHistoryServerListAsync(class UObject* WorldContextObject, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* RequestInternetServerListAsync(class UObject* WorldContextObject, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* RequestLANServerListAsync(class UObject* WorldContextObject, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* RequestSpectatorServerListAsync(class UObject* WorldContextObject, int32 AppID, float Timeout, int32 MaxResults, bool bIgnoreNonResponsive, class UServerFilter* ServerFilter);

	void HandleCallback(const struct FGameServerItem& Data);
	void HandleServerListFinished();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProMatchmakingServersAsyncActionRequestServerList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProMatchmakingServersAsyncActionRequestServerList")
	}
	static class USteamCoreProMatchmakingServersAsyncActionRequestServerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProMatchmakingServersAsyncActionRequestServerList>();
	}
};
DUMPER7_ASSERTS_USteamCoreProMatchmakingServersAsyncActionRequestServerList;

// Class SteamCorePro.SteamCoreProMatchmakingServersAsyncActionServerRules
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProMatchmakingServersAsyncActionServerRules final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FGameServerRule>& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void CancelServerRulesQueries(class UObject* WorldContextObject);
	static class USteamCoreProMatchmakingServersAsyncActionServerRules* ServerRulesAsync(class UObject* WorldContextObject, const class FString& IP, int32 QueryPort, float Timeout);

	void HandleCallback(const TArray<struct FGameServerRule>& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProMatchmakingServersAsyncActionServerRules")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProMatchmakingServersAsyncActionServerRules")
	}
	static class USteamCoreProMatchmakingServersAsyncActionServerRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProMatchmakingServersAsyncActionServerRules>();
	}
};
DUMPER7_ASSERTS_USteamCoreProMatchmakingServersAsyncActionServerRules;

// Class SteamCorePro.ServerFilter
// 0x0010 (0x0038 - 0x0028)
class UServerFilter final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddFilterAnd(const class FString& Value);
	void AddFilterDedicated();
	void AddFilterGameAddr(const class FString& Value);
	void AddFilterGameDataAnd(const class FString& Value);
	void AddFilterGameDataNor(const class FString& Value);
	void AddFilterGameDataOr(const class FString& Value);
	void AddFilterGameTagsAnd(const class FString& Value);
	void AddFilterGameTagsNor(const class FString& Value);
	void AddFilterHasPlayers();
	void AddFilterLinux();
	void AddFilterMap(const class FString& Value);
	void AddFilterName(const class FString& Value);
	void AddFilterNand(const class FString& Value);
	void AddFilterNoPlayers();
	void AddFilterNor(const class FString& Value);
	void AddFilterNotAppId(const class FString& Value);
	void AddFilterNotFull();
	void AddFilterOr(const class FString& Value);
	void AddFilterPassword();
	void AddFilterProxy();
	void AddFilterSecure();
	void AddFilterVersion(const class FString& Value);
	void AddFilterWhitelisted();
	TMap<class FString, class FString> GetFilters();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ServerFilter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ServerFilter")
	}
	static class UServerFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerFilter>();
	}
};
DUMPER7_ASSERTS_UServerFilter;

// Class SteamCorePro.SteamProMusic
// 0x0060 (0x0088 - 0x0028)
class USteamProMusic final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FPlaybackStatusHasChanged& Data)> PlaybackStatusHasChanged; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVolumeHasChanged& Data)> VolumeHasChanged;           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamProMusic* GetSteamMusic();

	bool bIsEnabled();
	bool BIsPlaying();
	ESteamAudioPlaybackStatus GetPlaybackStatus();
	float GetVolume();
	void Pause();
	void Play();
	void PlayNext();
	void PlayPrevious();
	void SetVolume(float flVolume);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProMusic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProMusic")
	}
	static class USteamProMusic* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProMusic>();
	}
};
DUMPER7_ASSERTS_USteamProMusic;

// Class SteamCorePro.SteamProNetworking
// 0x0060 (0x0088 - 0x0028)
class USteamProNetworking final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FP2PSessionRequest& Data)> OnP2PSessionRequestDelegate; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FP2PSessionConnectFail& Data)> OnP2PSessionConnectFailDelegate; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamProNetworking* GetSteamNetworking();

	bool AcceptP2PSessionWithUser(const struct FSteamID& SteamIDRemote);
	bool AllowP2PPacketRelay(bool bAllow);
	bool CloseP2PChannelWithUser(const struct FSteamID& SteamIDRemote, int32 Channel);
	bool CloseP2PSessionWithUser(const struct FSteamID& SteamIDRemote);
	bool GetP2PSessionState(const struct FSteamID& SteamIDRemote, struct FSteamP2PSessionState* ConnectionState);
	bool IsP2PPacketAvailable(int32* MessageSize, int32 Channel);
	bool ReadP2PPacket(TArray<uint8>* Data, struct FSteamID* OutSteamIdRemote, int32 MessageSize, int32 Channel);
	bool SendP2PPacket(const struct FSteamID& SteamIDRemote, const TArray<uint8>& Data, ESteamP2PSend P2PSendType, int32 Channel);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProNetworking")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProNetworking")
	}
	static class USteamProNetworking* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProNetworking>();
	}
};
DUMPER7_ASSERTS_USteamProNetworking;

// Class SteamCorePro.SteamProNetworkingUtils
// 0x0000 (0x0028 - 0x0028)
class USteamProNetworkingUtils final : public USteamCoreInterface
{
public:
	static void ConvertPingLocationToString(const struct FSteamNetworkPingLocation& Location, class FString* String);
	static class USteamProNetworkingUtils* GetSteamNetworkingUtils();
	static bool ParsePingLocationString(const class FString& String, struct FSteamNetworkPingLocation* Result);

	bool CheckPingDataUpToDate(float MaxAgeSeconds);
	int32 EstimatePingTimeBetweenTwoLocations(const struct FSteamNetworkPingLocation& Location1, const struct FSteamNetworkPingLocation& Location2);
	int32 EstimatePingTimeFromLocalHost(const struct FSteamNetworkPingLocation& RemoteLocation);
	float GetLocalPingLocation(struct FSteamNetworkPingLocation* Result);
	void InitRelayNetworkAccess();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProNetworkingUtils")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProNetworkingUtils")
	}
	static class USteamProNetworkingUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProNetworkingUtils>();
	}
};
DUMPER7_ASSERTS_USteamProNetworkingUtils;

// Class SteamCorePro.SteamProParentalSettings
// 0x0000 (0x0028 - 0x0028)
class USteamProParentalSettings final : public USteamCoreInterface
{
public:
	static class USteamProParentalSettings* GetSteamParentalSettings();

	bool BIsAppBlocked(int32 AppID);
	bool BIsAppInBlockList(int32 AppID);
	bool BIsFeatureBlocked(ESteamParentalFeature Feature);
	bool BIsFeatureInBlockList(ESteamParentalFeature Feature);
	bool BIsParentalLockEnabled();
	bool BIsParentalLockLocked();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProParentalSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProParentalSettings")
	}
	static class USteamProParentalSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProParentalSettings>();
	}
};
DUMPER7_ASSERTS_USteamProParentalSettings;

// Class SteamCorePro.SteamCoreProSteamPartiesAsyncActionJoinParty
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProSteamPartiesAsyncActionJoinParty final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FJoinPartyData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProSteamPartiesAsyncActionJoinParty* JoinPartyAsync(class UObject* WorldContextObject, const struct FPartyBeaconID& BeaconID, float Timeout);

	void HandleCallback(const struct FJoinPartyData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProSteamPartiesAsyncActionJoinParty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProSteamPartiesAsyncActionJoinParty")
	}
	static class USteamCoreProSteamPartiesAsyncActionJoinParty* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProSteamPartiesAsyncActionJoinParty>();
	}
};
DUMPER7_ASSERTS_USteamCoreProSteamPartiesAsyncActionJoinParty;

// Class SteamCorePro.SteamCoreProSteamPartiesAsyncActionCreateBeacon
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProSteamPartiesAsyncActionCreateBeacon final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FCreateBeaconData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProSteamPartiesAsyncActionCreateBeacon* CreateBeaconAsync(class UObject* WorldContextObject, int32 OpenSlots, const struct FSteamPartyBeaconLocation& BeaconLocation, const class FString& ConnectString, const class FString& MetaData, float Timeout);

	void HandleCallback(const struct FCreateBeaconData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProSteamPartiesAsyncActionCreateBeacon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProSteamPartiesAsyncActionCreateBeacon")
	}
	static class USteamCoreProSteamPartiesAsyncActionCreateBeacon* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProSteamPartiesAsyncActionCreateBeacon>();
	}
};
DUMPER7_ASSERTS_USteamCoreProSteamPartiesAsyncActionCreateBeacon;

// Class SteamCorePro.SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FChangeNumOpenSlotsData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots* ChangeNumOpenSlotsAsync(class UObject* WorldContextObject, const struct FPartyBeaconID& BeaconID, int32 OpenSlots, float Timeout);

	void HandleCallback(const struct FChangeNumOpenSlotsData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots")
	}
	static class USteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots>();
	}
};
DUMPER7_ASSERTS_USteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots;

// Class SteamCorePro.SteamProApps
// 0x00C0 (0x00E8 - 0x0028)
class USteamProApps final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FDLCInstalled& Data)> DLCInstalled;                   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FFileDetailsResult& Data)> FileDetailsResultDelegate; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              NewUrlLaunchParametersDelegate;                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FTimedTrialStatus& Data)> TimedTrialStatusDelegate;   // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x80];                                      // 0x0068(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool BGetDLCDataByIndex(int32 DLC, int32* AppID, bool* bAvailable, class FString* Name_0);
	static bool BIsAppInstalled(int32 AppID);
	static bool BIsCybercafe();
	static bool BIsDlcInstalled(int32 AppID);
	static bool BIsLowViolence();
	static bool BIsSubscribed();
	static bool BIsSubscribedApp(int32 AppID);
	static bool BIsSubscribedFromFamilySharing();
	static bool BIsSubscribedFromFreeWeekend();
	static bool BIsTimedTrial(int32* SecondsAllowed, int32* SecondsPlayed);
	static bool BIsVACBanned();
	static int32 GetAppBuildId();
	static int32 GetAppInstallDir(int32 AppID, class FString* Folder);
	static struct FSteamID GetAppOwner();
	static class FString GetAvailableGameLanguages();
	static bool GetBetaInfo(int32 BetaIndex, TArray<ESteamBetaBranchFlags>* Flags_0, int32* BuildId, class FString* BetaName, class FString* Description);
	static bool GetCurrentBetaName(class FString* Name_0);
	static class FString GetCurrentGameLanguage();
	static int32 GetDLCCount();
	static bool GetDlcDownloadProgress(int32 AppID, int32* BytesDownloaded, int32* BytesTotal);
	static int32 GetEarliestPurchaseUnixTime(int32 AppID);
	static int32 GetInstalledDepots(int32 AppID, int32 MaxDepots, TArray<int32>* Depots);
	static int32 GetLaunchCommandLine(class FString* CommandLine);
	static class FString GetLaunchQueryParam(const class FString& Key);
	static int32 GetNumBetas(int32* Available, int32* Private);
	static class USteamProApps* GetSteamApps();
	static void InstallDLC(int32 AppID);
	static bool MarkContentCorrupt(bool bMissingFilesOnly);
	static bool SetActiveBeta(const class FString& BetaName);
	static bool SetDlcContext(int32 AppID);
	static void UninstallDLC(int32 AppID);

	void GetFileDetails(const TDelegate<void(const struct FFileDetailsResult& Data, bool bWasSuccessful)>& Callback, const class FString& Filename);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProApps")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProApps")
	}
	static class USteamProApps* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProApps>();
	}
};
DUMPER7_ASSERTS_USteamProApps;

// Class SteamCorePro.SteamProGameSearch
// 0x0150 (0x0178 - 0x0028)
class USteamProGameSearch final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FSearchForGameProgressCallback& Data)> SearchForGameProgressDelegate; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSearchForGameResultCallback& Data)> SearchForGameResultDelegate; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRequestPlayersForGameProgressCallback& Data)> RequestPlayersForGameProgressDelegate; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRequestPlayersForGameResultCallback& Data)> RequestPlayersForGameResultDelegate; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRequestPlayersForGameFinalResultCallback& Data)> RequestPlayersForGameFinalResultDelegate; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSubmitPlayerResultResultCallback& Data)> SubmitPlayerResultResultDelegate; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FEndGameResultCallback& Data)> EndGameResultDelegate; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0xE0];                                      // 0x0098(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamProGameSearch* GetSteamGameSearch();

	ESteamGameSearchErrorCode AcceptGame();
	ESteamGameSearchErrorCode AddGameSearchParams(const class FString& KeyToFind, const TArray<class FString>& ValuesToFind);
	ESteamGameSearchErrorCode CancelRequestPlayersForGame();
	ESteamGameSearchErrorCode DeclineGame();
	ESteamGameSearchErrorCode EndGame(const class FString& UniqueGameID);
	ESteamGameSearchErrorCode EndGameSearch();
	ESteamGameSearchErrorCode HostConfirmGameStart(const class FString& UniqueGameID);
	ESteamGameSearchErrorCode RequestPlayersForGame(int32 PlayerMin, int32 PlayerMax, int32 MaxTeamSize);
	ESteamGameSearchErrorCode RetrieveConnectionDetails(const struct FSteamID& SteamIDHost, class FString* ConnectionDetails, int32 NumConnectionDetails);
	ESteamGameSearchErrorCode SearchForGameSolo(int32 PlayerMin, int32 PlayerMax);
	ESteamGameSearchErrorCode SearchForGameWithLobby(const struct FSteamID& SteamIDLobby, int32 PlayerMin, int32 PlayerMax);
	ESteamGameSearchErrorCode SetConnectionDetails(const class FString& ConnectionDetails);
	ESteamGameSearchErrorCode SetGameHostParams(const class FString& Key, const TArray<class FString>& Values);
	ESteamGameSearchErrorCode SubmitPlayerResult(const class FString& UniqueGameID, const struct FSteamID& SteamIDPlayer, ESteamPlayerResult PlayerResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProGameSearch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProGameSearch")
	}
	static class USteamProGameSearch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProGameSearch>();
	}
};
DUMPER7_ASSERTS_USteamProGameSearch;

// Class SteamCorePro.SteamProGameServer
// 0x00F0 (0x0118 - 0x0028)
class USteamProGameServer final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FGSPolicyResponse& Data)> GSPolicyResponse;           // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGSClientGroupStatus& Data)> GSClientGroupStatus;     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FValidateAuthTicketResponse& Data)> GSValidateAuthTicketResponse; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGSClientApprove& Data)> GSClientApprove;             // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGSClientDeny& Data)> GSClientDeny;                   // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0xA0];                                      // 0x0078(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamProGameServer* GetSteamGameServer();

	void AssociateWithClan(const TDelegate<void(const struct FAssociateWithClanResult& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDClan);
	ESteamBeginAuthSessionResult BeginAuthSession(const TArray<uint8>& Ticket, const struct FSteamID& SteamID);
	bool BLoggedOn();
	bool BSecure();
	bool BUpdateUserData(const struct FSteamID& SteamIDUser, const class FString& PlayerName, int32 Score);
	void CancelAuthTicket(const struct FSteamTicketHandle& TicketHandle);
	void ClearAllKeyValues();
	void ComputeNewPlayerCompatibility(const TDelegate<void(const struct FComputeNewPlayerCompatibilityResult& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamIDNewPlayer);
	struct FSteamID CreateUnauthenticatedUserConnection();
	void EndAuthSession(const struct FSteamID& SteamID);
	struct FSteamTicketHandle GetAuthSessionTicket(TArray<uint8>* Ticket, const struct FSteamNetworkingIdentity& SteamNetworkingIdentity);
	class FString GetServerPublicIP();
	class FString GetServerPublicIP_Pure();
	class FString GetServerPublicIP_PureCompact();
	struct FSteamID GetServerSteamID();
	struct FSteamID GetServerSteamID_Pure();
	struct FSteamID GetServerSteamID_PureCompact();
	void LogOff();
	void LogOn(const class FString& Token);
	void LogOnAnonymous();
	bool RequestUserGroupStatus(const struct FSteamID& SteamIDUser, const struct FSteamID& SteamIDGroup);
	void SetAdvertiseServerActive(bool bActive);
	void SetBotPlayerCount(int32 BotPlayers);
	void SetDedicatedServer(bool bDedicated);
	void SetGameData(const class FString& GameData);
	void SetGameDescription(const class FString& GameDescription);
	void SetGameTags(const class FString& GameTags);
	void SetKeyValue(const class FString& Key, const class FString& Value);
	void SetMapName(const class FString& MapName);
	void SetMaxPlayerCount(int32 PlayersMax);
	void SetModDir(const class FString& ModDir);
	void SetPasswordProtected(bool bPasswordProtected);
	void SetProduct(const class FString& Product);
	void SetRegion(const class FString& Region);
	void SetServerName(const class FString& ServerName);
	void SetSpectatorPort(int32 SpectatorPort);
	void SetSpectatorServerName(const class FString& SpectatorServerName);
	ESteamUserHasLicenseForAppResult UserHasLicenseForApp(const struct FSteamID& SteamID, int32 AppID);
	bool WasRestartRequested();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProGameServer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProGameServer")
	}
	static class USteamProGameServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProGameServer>();
	}
};
DUMPER7_ASSERTS_USteamProGameServer;

// Class SteamCorePro.SteamProParties
// 0x0120 (0x0148 - 0x0028)
class USteamProParties final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FJoinPartyData& Data)> JoinPartyDelegate;             // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCreateBeaconData& Data)> CreateBeaconDelegate;       // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FReservationNotificationData& Data)> ReservationNotificationDelegate; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FChangeNumOpenSlotsData& Data)> ChangeNumOpenSlotsDelegate; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              AvailableBeaconLocationsDelegate;                  // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ActiveBeaconsDelegate;                             // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0xC0];                                      // 0x0088(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void CancelReservation(const struct FPartyBeaconID& BeaconID, const struct FSteamID& SteamIDUser);
	static bool DestroyBeacon(const struct FPartyBeaconID& BeaconID);
	static bool GetAvailableBeaconLocations(TArray<struct FSteamPartyBeaconLocation>* LocationList, int32 MaxNumLocations);
	static struct FPartyBeaconID GetBeaconByIndex(int32 Index_0);
	static bool GetBeaconDetails(const struct FPartyBeaconID& BeaconID, struct FSteamID* SteamIDBeaconOwner, struct FSteamPartyBeaconLocation* Location, class FString* OutMetadata);
	static bool GetBeaconLocationData(const struct FSteamPartyBeaconLocation& BeaconLocation, ESteamPartiesBeaconLocationData EData, class FString* PCHDataStringOut);
	static int32 GetNumActiveBeacons();
	static bool GetNumAvailableBeaconLocations(int32* NumLocations);
	static class USteamProParties* GetSteamParties();
	static void OnReservationCompleted(const struct FPartyBeaconID& BeaconID, const struct FSteamID& SteamIDUser);

	void ChangeNumOpenSlots(const TDelegate<void(const struct FChangeNumOpenSlotsData& Data, bool bWasSuccessful)>& Callback, const struct FPartyBeaconID& BeaconID, int32 OpenSlots);
	void CreateBeacon(const TDelegate<void(const struct FCreateBeaconData& Data, bool bWasSuccessful)>& Callback, int32 OpenSlots, const struct FSteamPartyBeaconLocation& BeaconLocation, const class FString& ConnectString, const class FString& MetaData);
	void JoinParty(const TDelegate<void(const struct FJoinPartyData& Data, bool bWasSuccessful)>& Callback, const struct FPartyBeaconID& BeaconID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProParties")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProParties")
	}
	static class USteamProParties* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProParties>();
	}
};
DUMPER7_ASSERTS_USteamProParties;

// Class SteamCorePro.SteamProRemotePlay
// 0x0060 (0x0088 - 0x0028)
class USteamProRemotePlay final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FSteamRemotePlaySessionConnected& Data)> SteamRemotePlaySessionConnected; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamRemotePlaySessionDisconnected& Data)> SteamRemotePlaySessionDisconnected; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamProRemotePlay* GetSteamRemotePlay();

	bool BEnableRemotePlayTogetherDirectInput();
	bool BGetSessionClientResolution(int32 SessionID, int32* ResolutionX, int32* ResolutionY);
	bool BSendRemotePlayTogetherInvite(const struct FSteamID& SteamIDFriend);
	void DisableRemotePlayTogetherDirectInput();
	int32 GetInput(const struct FRemotePlayInput& Input, int32 MaxEvents);
	ESteamCoreProDeviceFormFactor GetSessionClientFormFactor(int32 SessionID);
	class FString GetSessionClientName(int32 SessionID);
	int32 GetSessionCount();
	int32 GetSessionID(int32 SessionIndex);
	struct FSteamID GetSessionSteamID(int32 SessionID);
	void SetMouseCursor(const struct FRemotePlaySessionID& SessionID, const struct FRemotePlayCursorID& CursorID);
	void SetMousePosition(const struct FRemotePlaySessionID& SessionID, float NormalizedX, float NormalizedY);
	void SetMouseVisibility(const struct FRemotePlaySessionID& SessionID, bool bVisible);
	bool ShowRemotePlayTogetherUI();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProRemotePlay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProRemotePlay")
	}
	static class USteamProRemotePlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProRemotePlay>();
	}
};
DUMPER7_ASSERTS_USteamProRemotePlay;

// Class SteamCorePro.SteamProRemoteStorage
// 0x00C0 (0x00E8 - 0x0028)
class USteamProRemoteStorage final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FRemoteStorageUnsubscribePublishedFileResult& Data)> RemoteStorageUnsubscribePublishedFileResult; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRemoteStorageSubscribePublishedFileResult& Data)> RemoteStorageSubscribePublishedFileResult; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRemoteStoragePublishedFileUnsubscribed& Data)> RemoteStoragePublishedFileUnsubscribed; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRemoteStoragePublishedFileSubscribed& Data)> RemoteStoragePublishedFileSubscribed; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x80];                                      // 0x0068(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool BeginFileWriteBatch();
	static bool EndFileWriteBatch();
	static bool FileDelete(const class FString& File);
	static bool FileExists(const class FString& File);
	static bool FileForget(const class FString& File);
	static bool FilePersisted(const class FString& File);
	static int32 FileRead(const class FString& File, TArray<uint8>* Buffer, int32 DataToRead);
	static bool FileReadAsyncComplete(const struct FRemoteStorageFileReadAsyncComplete& ReadCall, TArray<uint8>* Buffer, int32 BytesToRead);
	static bool FileWrite(const class FString& File, const TArray<uint8>& Data);
	static bool FileWriteStreamCancel(const struct FUGCFileWriteStreamHandle& Handle);
	static bool FileWriteStreamClose(const struct FUGCFileWriteStreamHandle& Handle);
	static struct FUGCFileWriteStreamHandle FileWriteStreamOpen(const class FString& File);
	static bool FileWriteStreamWriteChunk(const struct FUGCFileWriteStreamHandle& Handle, const TArray<uint8>& Data);
	static int32 GetCachedUGCCount();
	static struct FSteamUGCHandle GetCachedUGCHandle(int32 ICachedContent);
	static int32 GetFileCount();
	static class FString GetFileNameAndSize(int32 File, int32* FileSizeInBytes);
	static int32 GetFileSize(const class FString& File);
	static int32 GetFileTimestamp(const class FString& File);
	static int32 GetLocalFileChangeCount();
	static bool GetQuota(int32* TotalBytes, int32* AvailableBytes);
	static class USteamProRemoteStorage* GetSteamRemoteStorage();
	static ESteamRemoteStoragePlatform GetSyncPlatforms(const class FString& File);
	static bool GetUGCDetails(const struct FSteamUGCHandle& Handle, int32* AppID, class FString* Name_0, int32* FileSizeInBytes, struct FSteamID* SteamIDOwner);
	static bool GetUGCDownloadProgress(const struct FSteamUGCHandle& Handle, int32* BytesDownloaded, int32* BytesExpected);
	static bool IsCloudEnabledForAccount();
	static bool IsCloudEnabledForApp();
	static void SetCloudEnabledForApp(bool bEnabled);
	static bool SetSyncPlatforms(const class FString& File, ESteamRemoteStoragePlatform RemoteStoragePlatform);
	static int32 UGCRead(const struct FSteamUGCHandle& Content, TArray<uint8>* OutData, int32 DataToRead, int32 Offset, ESteamUGCReadAction Action);

	void FileReadAsync(const TDelegate<void(const struct FRemoteStorageFileReadAsyncComplete& Data, bool bWasSuccessful)>& Callback, const class FString& File, int32 Offset, int32 BytesToRead);
	void FileShare(const TDelegate<void(const struct FRemoteStorageFileShareResult& Data, bool bWasSuccessful)>& Callback, const class FString& File);
	void FileWriteAsync(const TDelegate<void(const struct FRemoteStorageFileWriteAsyncComplete& Data, bool bWasSuccessful)>& Callback, const class FString& File, const TArray<uint8>& Data);
	void UGCDownload(const TDelegate<void(const struct FRemoteStorageDownloadUGCResult& Data, bool bWasSuccessful)>& Callback, const struct FSteamUGCHandle& Content, int32 Priority);
	void UGCDownloadToLocation(const TDelegate<void(const struct FRemoteStorageDownloadUGCResult& Data, bool bWasSuccessful)>& Callback, const struct FSteamUGCHandle& Content, const class FString& Location, int32 Priority);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProRemoteStorage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProRemoteStorage")
	}
	static class USteamProRemoteStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProRemoteStorage>();
	}
};
DUMPER7_ASSERTS_USteamProRemoteStorage;

// Class SteamCorePro.SteamProScreenshots
// 0x0060 (0x0088 - 0x0028)
class USteamProScreenshots final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FScreenshotReady& Data)> ScreenshotReady;             // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FScreenshotRequested& Data)> ScreenshotRequested;     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FScreenshotHandle AddScreenshotToLibrary(const class FString& Filename, const class FString& ThumbnailFilename, int32 Width, int32 Height);
	static struct FScreenshotHandle AddVRScreenshotToLibrary(ESteamVRScreenshotType EType, const class FString& Filename, const class FString& VRFileName);
	static class USteamProScreenshots* GetSteamScreenshots();
	static void HookScreenshots(bool bHook);
	static bool IsScreenshotsHooked();
	static bool SetLocation(const struct FScreenshotHandle& Handle, const class FString& Location);
	static bool TagPublishedFile(const struct FScreenshotHandle& Handle, const struct FPublishedFileID& PublishedFileID);
	static bool TagUser(const struct FScreenshotHandle& Handle, const struct FSteamID& SteamID);
	static void TriggerScreenshot();
	static struct FScreenshotHandle WriteScreenshot(const TArray<uint8>& PubRGB, int32 Width, int32 Height);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProScreenshots")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProScreenshots")
	}
	static class USteamProScreenshots* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProScreenshots>();
	}
};
DUMPER7_ASSERTS_USteamProScreenshots;

// Class SteamCorePro.SteamProTimeline
// 0x0030 (0x0058 - 0x0028)
class USteamProTimeline final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FSteamTimelineEventRecordingExists& Data)> SteamTimelineEventRecordingExists; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FTimelineEventHandle AddInstantaneousTimelineEvent(const class FString& Title, const class FString& Description, const class FString& Icon, int32 IconPriority, float StartOffsetSeconds, ESteamTimelineEventClipPriority PossibleClip);
	static struct FTimelineEventHandle AddRangeTimelineEvent(const class FString& Title, const class FString& Description, const class FString& Icon, int32 IconPriority, float StartOffsetSeconds, float Duration, ESteamTimelineEventClipPriority PossibleClip);
	static void ClearTimelineTooltip(float Delta);
	static void EndRangeTimelineEvent(const struct FTimelineEventHandle& Event, float EndOffsetSeconds);
	static class USteamProTimeline* GetSteamTimeline();
	static void RemoveTimelineEvent(const struct FTimelineEventHandle& Event);
	static void SetTimelineGameMode(ESteamTimelineGameMode Mode);
	static void SetTimelineTooltip(const class FString& Description, float Delta);
	static struct FTimelineEventHandle StartRangeTimelineEvent(const class FString& Title, const class FString& Description, const class FString& Icon, int32 IconPriority, float StartOffsetSeconds, ESteamTimelineEventClipPriority PossibleClip);
	static void UpdateRangeTimelineEvent(const struct FTimelineEventHandle& Event, const class FString& Title, const class FString& Description, const class FString& Icon, int32 Priority, ESteamTimelineEventClipPriority PossibleClip);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProTimeline")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProTimeline")
	}
	static class USteamProTimeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProTimeline>();
	}
};
DUMPER7_ASSERTS_USteamProTimeline;

// Class SteamCorePro.SteamProTimelineGamePhases
// 0x0030 (0x0058 - 0x0028)
class USteamProTimelineGamePhases final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FSteamTimelineGamePhaseRecordingExists& Data)> SteamTimelineGamePhaseRecordingExists; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddGamePhaseTag(const class FString& TagName, const class FString& TagIcon, const class FString& TagGroup, int32 Priority);
	static void EndGamePhase();
	static class USteamProTimelineGamePhases* GetSteamTimelineGamePhase();
	static void OpenOverlayToGamePhase(const class FString& PhaseID);
	static void OpenOverlayToTimelineEvent(const struct FTimelineEventHandle& Event);
	static void SetGamePhaseAttribute(const class FString& AttributeGroup, const class FString& AttributeValue, int32 Priority);
	static void SetGamePhaseID(const class FString& PhaseID);
	static void StartGamePhase();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProTimelineGamePhases")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProTimelineGamePhases")
	}
	static class USteamProTimelineGamePhases* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProTimelineGamePhases>();
	}
};
DUMPER7_ASSERTS_USteamProTimelineGamePhases;

// Class SteamCorePro.SteamProUGC
// 0x00C0 (0x00E8 - 0x0028)
class USteamProUGC final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FItemInstalled& Data)> ItemInstalled;                 // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDownloadItemResult& Data)> DownloadItemResult;       // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FUserSubscribedItemsListChanged& Data)> UserSubscribedItemsListChanged; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FWorkshopEULAStatus& Data)> WorkshopEULAStatus;       // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x80];                                      // 0x0068(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool AddContentDescriptor(const struct FUGCUpdateHandle& Handle, ESteamUGCContentDescriptorID DescId);
	static bool AddExcludedTag(const struct FUGCQueryHandle& Handle, const class FString& TagName);
	static bool AddItemKeyValueTag(const struct FUGCUpdateHandle& Handle, const class FString& Key, const class FString& Value);
	static bool AddItemPreviewFile(const struct FUGCUpdateHandle& Handle, const class FString& PreviewFile, ESteamItemPreviewType Type);
	static bool AddItemPreviewVideo(const struct FUGCUpdateHandle& Handle, const class FString& VideoID);
	static bool AddRequiredKeyValueTag(const struct FUGCQueryHandle& Handle, const class FString& Key, const class FString& Value);
	static bool AddRequiredTag(const struct FUGCQueryHandle& Handle, const class FString& TagName);
	static bool AddRequiredTagGroup(const struct FUGCQueryHandle& Handle, const TArray<class FString>& TagGroups);
	static bool BInitWorkshopForGameServer(int32 WorkshopDepotID, const class FString& Folder);
	static struct FUGCQueryHandle CreateQueryAllUGCRequest(ESteamUGCQuery QueryType, ESteamUGCMatchingUGCType FileType, int32 CreatorAppID, int32 ConsumerAppID, int32 Page);
	static struct FUGCQueryHandle CreateQueryUGCDetailsRequest(const TArray<struct FPublishedFileID>& PublishedFileIDs);
	static struct FUGCQueryHandle CreateQueryUserUGCRequest(const struct FSteamID& SteamID, ESteamUserUGCList ListType, ESteamUGCMatchingUGCType MatchingUGCType, ESteamUserUGCListSortOrder SortOrder, int32 CreatorAppID, int32 ConsumerAppID, int32 Page);
	static bool DownloadItem(const struct FPublishedFileID& PublishedFileID, bool bHighPriority);
	static bool GetItemDownloadInfo(const struct FPublishedFileID& PublishedFileID, int32* BytesDownloaded, int32* BytesTotal);
	static bool GetItemInstallInfo(const struct FPublishedFileID& PublishedFileID, int32* SizeOnDisk, class FString* Folder, int32* Timestamp);
	static int32 GetItemState(const struct FPublishedFileID& PublishedFileID, TArray<ESteamItemState>* States);
	static ESteamItemUpdateStatus GetItemUpdateProgress(const struct FUGCUpdateHandle& Handle, int32* BytesProcessed, int32* BytesTotal);
	static int32 GetNumSubscribedItems(bool bIncludeLocallyDisabled);
	static int32 GetNumSupportedGameVersions(const struct FUGCQueryHandle& Handle, int32 Index_0);
	static bool GetQueryUGCAdditionalPreview(const struct FUGCQueryHandle& Handle, int32 Index_0, int32 PreviewIndex, class FString* URLOrVideoID, class FString* OriginalFileName, ESteamItemPreviewType* PreviewType);
	static bool GetQueryUGCChildren(const struct FUGCQueryHandle& Handle, int32 Index_0, TArray<struct FPublishedFileID>* PublishedFileIDs, int32 MaxEntries);
	static bool GetQueryUGCKeyValueTag(const struct FUGCQueryHandle& Handle, int32 Index_0, int32 KeyValueTagIndex, class FString* Key, class FString* Value);
	static bool GetQueryUGCMetadata(const struct FUGCQueryHandle& Handle, int32 Index_0, class FString* MetaData, int32 MetadataSize);
	static int32 GetQueryUGCNumAdditionalPreviews(const struct FUGCQueryHandle& Handle, int32 Index_0);
	static int32 GetQueryUGCNumKeyValueTags(const struct FUGCQueryHandle& Handle, int32 Index_0);
	static int32 GetQueryUGCNumTags(const struct FUGCQueryHandle& Handle, int32 Index_0);
	static bool GetQueryUGCPreviewURL(const struct FUGCQueryHandle& Handle, int32 Index_0, class FString* URL);
	static bool GetQueryUGCResult(const struct FUGCQueryHandle& Handle, int32 Index_0, struct FSteamUGCDetails* Details);
	static bool GetQueryUGCStatistic(const struct FUGCQueryHandle& Handle, int32 Index_0, ESteamItemStatistic StatType, class FString* StatValue);
	static bool GetQueryUGCTag(const struct FUGCQueryHandle& Handle, int32 Index_0, int32 IndexTag, class FString* Value);
	static bool GetQueryUGCTagDisplayName(const struct FUGCQueryHandle& Handle, int32 Index_0, int32 IndexTag, class FString* Value);
	static class USteamProUGC* GetSteamUGC();
	static int32 GetSubscribedItems(TArray<struct FPublishedFileID>* PublishedFileIDs, int32 MaxEntries, bool bIncludeLocallyDisabled);
	static bool GetSupportedGameVersionData(const struct FUGCQueryHandle& Handle, int32 Index_0, int32 VersionIndex, class FString* GameBranchMin, class FString* GameBranchMax, int32 GameBranchSize);
	static int32 GetUserContentDescriptorPreferences(const TArray<ESteamUGCContentDescriptorID>& Descriptors, int32 MaxEntries);
	static bool ReleaseQueryUGCRequest(const struct FUGCQueryHandle& Handle);
	static bool RemoveContentDescriptor(const struct FUGCUpdateHandle& Handle, ESteamUGCContentDescriptorID DescId);
	static bool RemoveItemKeyValueTags(const struct FUGCUpdateHandle& Handle, const class FString& Key);
	static bool RemoveItemPreview(const struct FUGCUpdateHandle& Handle, int32 Index_0);
	static bool SetAdminQuery(const struct FUGCUpdateHandle& Handle, bool bAdminQuery);
	static bool SetAllowCachedResponse(const struct FUGCQueryHandle& Handle, int32 MaxAgeSeconds);
	static bool SetCloudFileNameFilter(const struct FUGCQueryHandle& Handle, const class FString& MatchCloudFileName);
	static bool SetItemContent(const struct FUGCUpdateHandle& Handle, const class FString& ContentFolder);
	static bool SetItemDescription(const struct FUGCUpdateHandle& Handle, const class FString& Description);
	static bool SetItemMetadata(const struct FUGCUpdateHandle& Handle, const class FString& MetaData);
	static bool SetItemPreview(const struct FUGCUpdateHandle& Handle, const class FString& PreviewFile);
	static bool SetItemsDisabledLocally(const TArray<struct FPublishedFileID>& PublishedFileIDs, bool bDisabledLocally);
	static bool SetItemTags(const struct FUGCUpdateHandle& Handle, const TArray<class FString>& Tags);
	static bool SetItemTitle(const struct FUGCUpdateHandle& Handle, const class FString& Title);
	static bool SetItemUpdateLanguage(const struct FUGCUpdateHandle& Handle, const class FString& Language);
	static bool SetItemVisibility(const struct FUGCUpdateHandle& Handle, ESteamRemoteStoragePublishedFileVisibility Visibility);
	static bool SetLanguage(const struct FUGCQueryHandle& Handle, const class FString& Language);
	static bool SetMatchAnyTag(const struct FUGCQueryHandle& Handle, bool bMatchAnyTag);
	static bool SetRankedByTrendDays(const struct FUGCQueryHandle& Handle, int32 Days);
	static bool SetRequiredGameVersions(const struct FUGCUpdateHandle& Handle, const class FString& GameBranchMin, const class FString& GameBranchMax);
	static bool SetReturnAdditionalPreviews(const struct FUGCQueryHandle& Handle, bool bReturnAdditionalPreviews);
	static bool SetReturnChildren(const struct FUGCQueryHandle& Handle, bool bReturnChildren);
	static bool SetReturnKeyValueTags(const struct FUGCQueryHandle& Handle, bool bReturnKeyValueTags);
	static bool SetReturnLongDescription(const struct FUGCQueryHandle& Handle, bool bReturnLongDescription);
	static bool SetReturnMetadata(const struct FUGCQueryHandle& Handle, bool bReturnMetadata);
	static bool SetReturnOnlyIDs(const struct FUGCQueryHandle& Handle, bool bReturnOnlyIDs);
	static bool SetReturnPlaytimeStats(const struct FUGCQueryHandle& Handle, int32 Days);
	static bool SetReturnTotalOnly(const struct FUGCQueryHandle& Handle, bool bReturnTotalOnly);
	static bool SetSearchText(const struct FUGCQueryHandle& Handle, const class FString& SearchText);
	static bool SetSubscriptionsLoadOrder(const TArray<struct FPublishedFileID>& PublishedFileIDs);
	static bool ShowWorkshopEULA();
	static struct FUGCUpdateHandle StartItemUpdate(int32 ConsumerAppID, const struct FPublishedFileID& PublishedFileID);
	static void SuspendDownloads(bool bSuspend);
	static bool UpdateItemPreviewFile(const struct FUGCUpdateHandle& Handle, int32 Index_0, const class FString& PreviewFile);
	static bool UpdateItemPreviewVideo(const struct FUGCUpdateHandle& Handle, int32 Index_0, const class FString& PreviewVideo);

	void AddAppDependency(const TDelegate<void(const struct FAddAppDependencyResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID, int32 AppID);
	void AddDependency(const TDelegate<void(const struct FAddUGCDependencyResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID, const struct FPublishedFileID& ChildPublishedFileId);
	void AddItemToFavorites(const TDelegate<void(const struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)>& Callback, int32 AppID, const struct FPublishedFileID& PublishedFileID);
	void CreateItem(const TDelegate<void(const struct FCreateItemResult& Data, bool bWasSuccessful)>& Callback, int32 ConsumerAppID, ESteamWorkshopFileType FileType);
	void DeleteItem(const TDelegate<void(const struct FUGCDeleteItemResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID);
	void GetAppDependencies(const TDelegate<void(const struct FGetAppDependenciesResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID);
	void GetUserItemVote(const TDelegate<void(const struct FGetUserItemVoteResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID);
	void GetWorkshopEULAStatus(const TDelegate<void(const struct FWorkshopEULAStatus& Data, bool bWasSuccessful)>& Callback);
	void RemoveAppDependency(const TDelegate<void(const struct FRemoveAppDependencyResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID, int32 AppID);
	void RemoveDependency(const TDelegate<void(const struct FRemoveUGCDependencyResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& ParentPublishedFileID, const struct FPublishedFileID& ChildPublishedFileId);
	void RemoveItemFromFavorites(const TDelegate<void(const struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)>& Callback, int32 AppID, const struct FPublishedFileID& PublishedFileID);
	void SendQueryUGCRequest(const TDelegate<void(const struct FSteamUGCQueryCompleted& Data, bool bWasSuccessful)>& Callback, const struct FUGCQueryHandle& Handle);
	bool SetAllowLegacyUpload(const struct FUGCUpdateHandle& Handle, bool bAllowLegacyUpload);
	void SetUserItemVote(const TDelegate<void(const struct FSetUserItemVoteResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID, bool bVoteUp);
	void StartPlaytimeTracking(const TDelegate<void(const struct FStartPlaytimeTrackingResult& Data, bool bWasSuccessful)>& Callback, const TArray<struct FPublishedFileID>& PublishedFileID);
	void StopPlaytimeTracking(const TDelegate<void(const struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)>& Callback, const TArray<struct FPublishedFileID>& PublishedFileIDs);
	void StopPlaytimeTrackingForAllItems(const TDelegate<void(const struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)>& Callback);
	void SubmitItemUpdate(const TDelegate<void(const struct FSubmitItemUpdateResult& Data, bool bWasSuccessful)>& Callback, const struct FUGCUpdateHandle& Handle, const class FString& ChangeNote);
	void SubscribeItem(const TDelegate<void(const struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID);
	void UnsubscribeItem(const TDelegate<void(const struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)>& Callback, const struct FPublishedFileID& PublishedFileID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProUGC")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProUGC")
	}
	static class USteamProUGC* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProUGC>();
	}
};
DUMPER7_ASSERTS_USteamProUGC;

// Class SteamCorePro.SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems* StopPlaytimeTrackingForAllItemsAsync(class UObject* WorldContextObject, float Timeout);

	void HandleCallback(const struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems")
	}
	static class USteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems;

// Class SteamCorePro.SteamCoreProUGCAsyncActionStopPlaytimeTracking
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionStopPlaytimeTracking final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionStopPlaytimeTracking* StopPlaytimeTrackingAsync(class UObject* WorldContextObject, const TArray<struct FPublishedFileID>& PublishedFileIDs, float Timeout);

	void HandleCallback(const struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionStopPlaytimeTracking")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionStopPlaytimeTracking")
	}
	static class USteamCoreProUGCAsyncActionStopPlaytimeTracking* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionStopPlaytimeTracking>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionStopPlaytimeTracking;

// Class SteamCorePro.SteamCoreProUGCAsyncActionStartPlaytimeTracking
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionStartPlaytimeTracking final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FStartPlaytimeTrackingResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionStartPlaytimeTracking* StartPlaytimeTrackingAsync(class UObject* WorldContextObject, const TArray<struct FPublishedFileID>& PublishedFileIDs, float Timeout);

	void HandleCallback(const struct FStartPlaytimeTrackingResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionStartPlaytimeTracking")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionStartPlaytimeTracking")
	}
	static class USteamCoreProUGCAsyncActionStartPlaytimeTracking* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionStartPlaytimeTracking>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionStartPlaytimeTracking;

// Class SteamCorePro.SteamCoreProUGCAsyncActionUnsubscribeItem
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionUnsubscribeItem final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionUnsubscribeItem* UnsubscribeItemAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileIDs, float Timeout);

	void HandleCallback(const struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionUnsubscribeItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionUnsubscribeItem")
	}
	static class USteamCoreProUGCAsyncActionUnsubscribeItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionUnsubscribeItem>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionUnsubscribeItem;

// Class SteamCorePro.SteamCoreProUGCAsyncActionSubscribeItem
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionSubscribeItem final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionSubscribeItem* SubscribeItemAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileIDs, float Timeout);

	void HandleCallback(const struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionSubscribeItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionSubscribeItem")
	}
	static class USteamCoreProUGCAsyncActionSubscribeItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionSubscribeItem>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionSubscribeItem;

// Class SteamCorePro.SteamCoreProUGCAsyncActionRemoveItemFromFavorites
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionRemoveItemFromFavorites final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionRemoveItemFromFavorites* RemoveItemFromFavoritesAsync(class UObject* WorldContextObject, int32 AppID, const struct FPublishedFileID& PublishedFileID, float Timeout);

	void HandleCallback(const struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionRemoveItemFromFavorites")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionRemoveItemFromFavorites")
	}
	static class USteamCoreProUGCAsyncActionRemoveItemFromFavorites* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionRemoveItemFromFavorites>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionRemoveItemFromFavorites;

// Class SteamCorePro.SteamCoreProUGCAsyncActionAddItemToFavorites
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionAddItemToFavorites final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionAddItemToFavorites* AddItemToFavoritesAsync(class UObject* WorldContextObject, int32 AppID, const struct FPublishedFileID& PublishedFileID, float Timeout);

	void HandleCallback(const struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionAddItemToFavorites")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionAddItemToFavorites")
	}
	static class USteamCoreProUGCAsyncActionAddItemToFavorites* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionAddItemToFavorites>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionAddItemToFavorites;

// Class SteamCorePro.SteamCoreProUGCAsyncActionGetUserItemVote
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionGetUserItemVote final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FGetUserItemVoteResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionGetUserItemVote* GetUserItemVoteAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, float Timeout);

	void HandleCallback(const struct FGetUserItemVoteResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionGetUserItemVote")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionGetUserItemVote")
	}
	static class USteamCoreProUGCAsyncActionGetUserItemVote* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionGetUserItemVote>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionGetUserItemVote;

// Class SteamCorePro.SteamCoreProUGCAsyncActionSetUserItemVote
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionSetUserItemVote final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FSetUserItemVoteResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionSetUserItemVote* SetUserItemVoteAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, bool bVoteUp, float Timeout);

	void HandleCallback(const struct FSetUserItemVoteResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionSetUserItemVote")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionSetUserItemVote")
	}
	static class USteamCoreProUGCAsyncActionSetUserItemVote* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionSetUserItemVote>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionSetUserItemVote;

// Class SteamCorePro.SteamCoreProUGCAsyncActionSubmitItemUpdate
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionSubmitItemUpdate final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FSubmitItemUpdateResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionSubmitItemUpdate* SubmitItemUpdateAsync(class UObject* WorldContextObject, const struct FUGCUpdateHandle& Handle, const class FString& ChangeNote, float Timeout);

	void HandleCallback(const struct FSubmitItemUpdateResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionSubmitItemUpdate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionSubmitItemUpdate")
	}
	static class USteamCoreProUGCAsyncActionSubmitItemUpdate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionSubmitItemUpdate>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionSubmitItemUpdate;

// Class SteamCorePro.SteamCoreProUGCAsyncActionCreateItem
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionCreateItem final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FCreateItemResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionCreateItem* CreateItemAsync(class UObject* WorldContextObject, int32 ConsumerAppID, ESteamWorkshopFileType FileType, float Timeout);

	void HandleCallback(const struct FCreateItemResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionCreateItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionCreateItem")
	}
	static class USteamCoreProUGCAsyncActionCreateItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionCreateItem>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionCreateItem;

// Class SteamCorePro.SteamCoreProUGCAsyncActionSendQueryUGCRequest
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionSendQueryUGCRequest final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FSteamUGCQueryCompleted& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionSendQueryUGCRequest* SendQueryUGCRequestAsync(class UObject* WorldContextObject, const struct FUGCQueryHandle& Handle, float Timeout);

	void HandleCallback(const struct FSteamUGCQueryCompleted& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionSendQueryUGCRequest")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionSendQueryUGCRequest")
	}
	static class USteamCoreProUGCAsyncActionSendQueryUGCRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionSendQueryUGCRequest>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionSendQueryUGCRequest;

// Class SteamCorePro.SteamCoreProUGCAsyncActionAddAppDependency
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionAddAppDependency final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FAddAppDependencyResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionAddAppDependency* AddAppDependencyAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, int32 AppID, float Timeout);

	void HandleCallback(const struct FAddAppDependencyResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionAddAppDependency")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionAddAppDependency")
	}
	static class USteamCoreProUGCAsyncActionAddAppDependency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionAddAppDependency>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionAddAppDependency;

// Class SteamCorePro.SteamCoreProUGCAsyncActionRemoveAppDependency
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionRemoveAppDependency final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FRemoveAppDependencyResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionRemoveAppDependency* RemoveAppDependencyAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, int32 AppID, float Timeout);

	void HandleCallback(const struct FRemoveAppDependencyResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionRemoveAppDependency")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionRemoveAppDependency")
	}
	static class USteamCoreProUGCAsyncActionRemoveAppDependency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionRemoveAppDependency>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionRemoveAppDependency;

// Class SteamCorePro.SteamCoreProUGCAsyncActionAddUGCDependency
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionAddUGCDependency final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FAddUGCDependencyResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionAddUGCDependency* AddDependencyAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, const struct FPublishedFileID& ChildPublishedFileId, float Timeout);

	void HandleCallback(const struct FAddUGCDependencyResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionAddUGCDependency")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionAddUGCDependency")
	}
	static class USteamCoreProUGCAsyncActionAddUGCDependency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionAddUGCDependency>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionAddUGCDependency;

// Class SteamCorePro.SteamCoreProUGCAsyncActionRemoveUGCDependency
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionRemoveUGCDependency final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FRemoveUGCDependencyResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionRemoveUGCDependency* RemoveDependencyAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, const struct FPublishedFileID& ChildPublishedFileId, float Timeout);

	void HandleCallback(const struct FRemoveUGCDependencyResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionRemoveUGCDependency")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionRemoveUGCDependency")
	}
	static class USteamCoreProUGCAsyncActionRemoveUGCDependency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionRemoveUGCDependency>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionRemoveUGCDependency;

// Class SteamCorePro.SteamCoreProUGCAsyncActionDeleteItem
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionDeleteItem final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FUGCDeleteItemResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionDeleteItem* DeleteItemAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, float Timeout);

	void HandleCallback(const struct FUGCDeleteItemResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionDeleteItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionDeleteItem")
	}
	static class USteamCoreProUGCAsyncActionDeleteItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionDeleteItem>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionDeleteItem;

// Class SteamCorePro.SteamCoreProUGCAsyncActionGetAppDependencies
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionGetAppDependencies final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FGetAppDependenciesResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionGetAppDependencies* GetAppDependenciesAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, float Timeout);

	void HandleCallback(const struct FGetAppDependenciesResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionGetAppDependencies")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionGetAppDependencies")
	}
	static class USteamCoreProUGCAsyncActionGetAppDependencies* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionGetAppDependencies>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionGetAppDependencies;

// Class SteamCorePro.SteamCoreProUGCAsyncActionDownloadItem
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUGCAsyncActionDownloadItem final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FDownloadItemResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUGCAsyncActionDownloadItem* DownloadItemAsync(class UObject* WorldContextObject, const struct FPublishedFileID& PublishedFileID, bool bHighPriority, float Timeout);

	void HandleCallback(const struct FDownloadItemResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUGCAsyncActionDownloadItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUGCAsyncActionDownloadItem")
	}
	static class USteamCoreProUGCAsyncActionDownloadItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUGCAsyncActionDownloadItem>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUGCAsyncActionDownloadItem;

// Class SteamCorePro.SteamProUser
// 0x0240 (0x0268 - 0x0028)
class USteamProUser final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FClientGameServerDeny& Data)> ClientGameServerDeny;   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameWebCallback& Data)> GameWebCallback;             // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGetAuthSessionTicketResponse& Data)> GetAuthSessionTicketResponse; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FIPCFailure& Data)> IPCFailure;                       // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLicensesUpdated& Data)> LicensesUpdated;             // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMicroTxnAuthorizationResponse& Data)> MicroTxnAuthorizationResponse; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamServerConnectFailure& Data)> SteamServerConnectFailure; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamServersConnected& Data)> SteamServersConnected; // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamServersDisconnected& Data)> SteamServersDisconnected; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FValidateAuthTicketResponse& Data)> ValidateAuthTicketResponse; // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FEncryptedAppTicketResponse& Data)> EncryptedAppTicketResponse; // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGetTicketForWebApiResponse& Data)> GetTicketForWebApiResponse; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x180];                                     // 0x00E8(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AdvertiseGame(const struct FSteamID& SteamIDGameServer, const class FString& ServerIP, int32 ServerPort);
	static ESteamBeginAuthSessionResult BeginAuthSession(const TArray<uint8>& Ticket, const struct FSteamID& SteamID);
	static bool BIsBehindNAT();
	static bool BIsPhoneIdentifying();
	static bool BIsPhoneRequiringVerification();
	static bool BIsPhoneVerified();
	static bool BIsTwoFactorEnabled();
	static bool BLoggedOn();
	static void CancelAuthTicket(const struct FSteamTicketHandle& TicketHandle);
	static ESteamVoiceResult DecompressVoice(const TArray<uint8>& CompressedBuffer, int32 DesiredSampleRate, TArray<uint8>* DestBuffer);
	static void EndAuthSession(const struct FSteamID& SteamID);
	static struct FSteamTicketHandle GetAuthSessionTicket(TArray<uint8>* Ticket, const struct FSteamNetworkingIdentity& SteamNetworkingIdentity);
	static struct FSteamTicketHandle GetAuthTicketForWebApi(const class FString& Identity);
	static ESteamVoiceResult GetAvailableVoice(int32* CompressedBytes, int32* UncompressedBytes, int32 UncompressedVoiceDesiredSampleRate);
	static bool GetEncryptedAppTicket(TArray<uint8>* Ticket);
	static int32 GetGameBadgeLevel(int32 Series, bool bFoil);
	static int32 GetPlayerSteamLevel();
	static struct FSteamID GetSteamID();
	static struct FSteamID GetSteamID_Pure();
	static class FString GetSteamIDAsString();
	static class USteamProUser* GetSteamUser();
	static ESteamVoiceResult GetVoice(TArray<uint8>* DestBuffer, int32* BytesWritten);
	static int32 GetVoiceOptimalSampleRate();
	static void StartVoiceRecording();
	static void StopVoiceRecording();
	static ESteamUserHasLicenseForAppResult UserHasLicenseForApp(const struct FSteamID& SteamID, int32 AppID);

	void RequestEncryptedAppTicket(const TDelegate<void(const struct FEncryptedAppTicketResponse& Data, bool bWasSuccessful)>& Callback, const TArray<uint8>& DataToInclude);
	void RequestStoreAuthURL(const TDelegate<void(const struct FStoreAuthURLResponse& Data, bool bWasSuccessful)>& Callback, const class FString& RedirectURL);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProUser")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProUser")
	}
	static class USteamProUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProUser>();
	}
};
DUMPER7_ASSERTS_USteamProUser;

// Class SteamCorePro.SteamCoreProUserAsyncActionRequestEncryptedAppTicket
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserAsyncActionRequestEncryptedAppTicket final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FEncryptedAppTicketResponse& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserAsyncActionRequestEncryptedAppTicket* RequestEncryptedAppTicketAsync(class UObject* WorldContextObject, const TArray<uint8>& DataToInclude, float Timeout);

	void HandleCallback(const struct FEncryptedAppTicketResponse& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserAsyncActionRequestEncryptedAppTicket")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserAsyncActionRequestEncryptedAppTicket")
	}
	static class USteamCoreProUserAsyncActionRequestEncryptedAppTicket* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserAsyncActionRequestEncryptedAppTicket>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserAsyncActionRequestEncryptedAppTicket;

// Class SteamCorePro.SteamCoreProUserAsyncActionRequestStoreAuthURL
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserAsyncActionRequestStoreAuthURL final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FStoreAuthURLResponse& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserAsyncActionRequestStoreAuthURL* RequestStoreAuthURLAsync(class UObject* WorldContextObject, const class FString& RedirectURL, float Timeout);

	void HandleCallback(const struct FStoreAuthURLResponse& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserAsyncActionRequestStoreAuthURL")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserAsyncActionRequestStoreAuthURL")
	}
	static class USteamCoreProUserAsyncActionRequestStoreAuthURL* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserAsyncActionRequestStoreAuthURL>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserAsyncActionRequestStoreAuthURL;

// Class SteamCorePro.SteamProUserStats
// 0x00F0 (0x0118 - 0x0028)
class USteamProUserStats final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FUserAchievementIconFetched& Data)> UserAchievementIconFetched; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FUserAchievementStored& Data)> UserAchievementStored; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FUserStatsReceived& Data)> UserStatsReceived;         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FUserStatsStored& Data)> UserStatsStored;             // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FUserStatsUnloaded& Data)> UserStatsUnloaded;         // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0xA0];                                      // 0x0078(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool ClearAchievement(const class FString& Name_0);
	static bool GetAchievement(const class FString& Name_0, bool* bAchieved);
	static bool GetAchievementAchievedPercent(const class FString& Name_0, float* Percent);
	static bool GetAchievementAndUnlockTime(const class FString& Name_0, bool* bAchieved, int32* UnlockTime);
	static class FString GetAchievementDisplayAttribute(const class FString& Name_0, const class FString& Key);
	static class UTexture2D* GetAchievementIcon(const class FString& Name_0);
	static class FString GetAchievementName(int32 Achievement);
	static bool GetAchievementProgressLimits(const class FString& Name_0, int32* MinProgress, int32* MaxProgress);
	static bool GetAchievementProgressLimitsFloat(const class FString& Name_0, float* MinProgress, float* MaxProgress);
	static bool GetDownloadedLeaderboardEntry(const struct FSteamLeaderboardEntries& LeaderboardEntries, int32 Index_0, struct FSteamLeaderboardEntry* LeaderboardEntry, const TArray<int32>& Details, TArray<int32>* outDetails);
	static bool GetGlobalStatFloat(const class FString& StatName, float* Data);
	static int32 GetGlobalStatHistoryFloat(const class FString& StatName, int32 HistoryDays, TArray<float>* Data);
	static int32 GetGlobalStatHistoryInt(const class FString& StatName, int32 HistoryDays, TArray<int32>* Data);
	static bool GetGlobalStatInt(const class FString& StatName, int32* Data);
	static ESteamLeaderboardDisplayType GetLeaderboardDisplayType(const struct FSteamLeaderboard& SteamLeaderboard);
	static int32 GetLeaderboardEntryCount(const struct FSteamLeaderboard& SteamLeaderboard);
	static class FString GetLeaderboardName(const struct FSteamLeaderboard& SteamLeaderboard);
	static ESteamLeaderboardSortMethod GetLeaderboardSortMethod(const struct FSteamLeaderboard& SteamLeaderboard);
	static int32 GetMostAchievedAchievementInfo(class FString* Name_0, float* Percent, bool* bAchieved);
	static int32 GetNextMostAchievedAchievementInfo(int32 IteratorPrevious, class FString* Name_0, float* Percent, bool* bAchieved);
	static int32 GetNumAchievements();
	static bool GetStatFloat(const class FString& Name_0, float* Data);
	static bool GetStatInt(const class FString& Name_0, int32* Data);
	static class USteamProUserStats* GetSteamUserStats();
	static bool GetUserAchievement(const struct FSteamID& SteamIDUser, const class FString& Name_0, bool* bAchieved);
	static bool GetUserAchievementAndUnlockTime(const struct FSteamID& SteamIDUser, const class FString& Name_0, bool* bAchieved, int32* UnlockTime);
	static bool GetUserStatFloat(const struct FSteamID& SteamIDUser, const class FString& Name_0, float* Data);
	static bool GetUserStatInteger(const struct FSteamID& SteamIDUser, const class FString& Name_0, int32* Data);
	static bool IndicateAchievementProgress(const class FString& Name_0, int32 CurrentProgress, int32 MaxProgress);
	static bool RequestCurrentStats();
	static bool ResetAllStats(bool bAchievementsToo);
	static bool SetAchievement(const class FString& Name_0);
	static bool SetStatFloat(const class FString& Name_0, float Data);
	static bool SetStatInt(const class FString& Name_0, int32 Data);
	static bool StoreStats();
	static bool UpdateAvgRateStat(const class FString& Name_0, float CountThisSession, float SessionLength);

	void AttachLeaderboardUGC(const TDelegate<void(const struct FAttachLeaderboardUGCData& Data, bool bWasSuccessful)>& Callback, const struct FSteamLeaderboard& SteamLeaderboard, const struct FSteamUGCHandle& Handle);
	void DownloadLeaderboardEntries(const TDelegate<void(const struct FLeaderboardScoresDownloaded& Data, bool bWasSuccessful)>& Callback, const struct FSteamLeaderboard& SteamLeaderboard, ESteamLeaderboardDataRequest DataRequest, int32 RangeStart, int32 RangeEnd);
	void DownloadLeaderboardEntriesForUsers(const TDelegate<void(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)>& Callback, const struct FSteamLeaderboard& SteamLeaderboard, const TArray<struct FSteamID>& Users);
	void FindLeaderboard(const TDelegate<void(const struct FLeaderboardFindResult& Data, bool bWasSuccessful)>& Callback, const class FString& LeaderboardName);
	void FindOrCreateLeaderboard(const TDelegate<void(const struct FFindOrCreateLeaderboardData& Data, bool bWasSuccessful)>& Callback, const class FString& LeaderboardName, ESteamLeaderboardSortMethod SortMethod, ESteamLeaderboardDisplayType DisplayType);
	void GetNumberOfCurrentPlayers(const TDelegate<void(const struct FNumberOfCurrentPlayers& Data, bool bWasSuccessful)>& Callback);
	void RequestGlobalAchievementPercentages(const TDelegate<void(const struct FGlobalAchievementPercentagesReady& Data, bool bWasSuccessful)>& Callback);
	void RequestGlobalStats(const TDelegate<void(const struct FGlobalStatsReceived& Data, bool bWasSuccessful)>& Callback, int32 HistoryDays);
	void RequestUserStats(const TDelegate<void(const struct FRequestUserStatsData& Data, bool bWasSuccessful)>& Callback, const struct FSteamID& SteamID);
	void UploadLeaderboardScore(const TDelegate<void(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)>& Callback, const struct FSteamLeaderboard& SteamLeaderboard, ESteamLeaderboardUploadScoreMethod UploadScoreMethod, int32 Score, const TArray<int32>& ScoreDetails);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProUserStats")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProUserStats")
	}
	static class USteamProUserStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProUserStats>();
	}
};
DUMPER7_ASSERTS_USteamProUserStats;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionFindLeaderboard
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionFindLeaderboard final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FLeaderboardFindResult& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionFindLeaderboard* FindLeaderboardAsync(class UObject* WorldContextObject, const class FString& LeaderboardName, float Timeout);

	void HandleCallback(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionFindLeaderboard")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionFindLeaderboard")
	}
	static class USteamCoreProUserStatsAsyncActionFindLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionFindLeaderboard>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionFindLeaderboard;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FLeaderboardScoresDownloaded& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries* DownloadLeaderboardEntriesAsync(class UObject* WorldContextObject, const struct FSteamLeaderboard& SteamLeaderboard, ESteamLeaderboardDataRequest Request, int32 RangeStart, int32 RangeEnd, float Timeout);

	void HandleCallback(const struct FLeaderboardScoresDownloaded& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries")
	}
	static class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FGlobalStatsReceived& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats* RequestGlobalStatsAsync(class UObject* WorldContextObject, int32 HistoryDays, float Timeout);

	void HandleCallback(const struct FGlobalStatsReceived& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats")
	}
	static class USteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FGlobalAchievementPercentagesReady& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages* RequestGlobalAchievementPercentagesAsync(class UObject* WorldContextObject, float Timeout);

	void HandleCallback(const struct FGlobalAchievementPercentagesReady& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages")
	}
	static class USteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FNumberOfCurrentPlayers& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers* GetNumberOfCurrentPlayersAsync(class UObject* WorldContextObject, float Timeout);

	void HandleCallback(const struct FNumberOfCurrentPlayers& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers")
	}
	static class USteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionUploadLeaderboardScore
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionUploadLeaderboardScore final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionUploadLeaderboardScore* UploadLeaderboardScoreAsync(class UObject* WorldContextObject, const struct FSteamLeaderboard& SteamLeaderboard, ESteamLeaderboardUploadScoreMethod UploadScoreMethod, int32 Score, const TArray<int32>& ScoreDetails, float Timeout);

	void HandleCallback(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionUploadLeaderboardScore")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionUploadLeaderboardScore")
	}
	static class USteamCoreProUserStatsAsyncActionUploadLeaderboardScore* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionUploadLeaderboardScore>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionUploadLeaderboardScore;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FFindOrCreateLeaderboardData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard* FindOrCreateLeaderboardAsync(class UObject* WorldContextObject, const class FString& LeaderboardName, ESteamLeaderboardSortMethod SortMethod, ESteamLeaderboardDisplayType DisplayType, float Timeout);

	void HandleCallback(const struct FFindOrCreateLeaderboardData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard")
	}
	static class USteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionRequestUserStats
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionRequestUserStats final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FRequestUserStatsData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionRequestUserStats* RequestUserStatsAsync(class UObject* WorldContextObject, const struct FSteamID& SteamID, float Timeout);

	void HandleCallback(const struct FRequestUserStatsData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionRequestUserStats")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionRequestUserStats")
	}
	static class USteamCoreProUserStatsAsyncActionRequestUserStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionRequestUserStats>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionRequestUserStats;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionRequestCurrentStats
// 0x0030 (0x0060 - 0x0030)
class USteamCoreProUserStatsAsyncActionRequestCurrentStats final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FRequestCurrentStatsData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USteamCoreProUserStatsAsyncActionRequestCurrentStats* RequestCurrentStatsAsync(class UObject* WorldContextObject, float Timeout);

	void HandleCallback(const struct FRequestCurrentStatsData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionRequestCurrentStats")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionRequestCurrentStats")
	}
	static class USteamCoreProUserStatsAsyncActionRequestCurrentStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionRequestCurrentStats>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionRequestCurrentStats;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers* DownloadLeaderboardEntriesForUsersAsync(class UObject* WorldContextObject, const struct FSteamLeaderboard& SteamLeaderboard, const TArray<struct FSteamID>& Users, float Timeout);

	void HandleCallback(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers")
	}
	static class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers;

// Class SteamCorePro.SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProUserStatsAsyncActionAttachLeaderboardUGC final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FAttachLeaderboardUGCData& Data, bool bWasSuccessful)> OnCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProUserStatsAsyncActionAttachLeaderboardUGC* AttachLeaderboardUGCAsync(class UObject* WorldContextObject, const struct FSteamLeaderboard& SteamLeaderboard, const struct FSteamUGCHandle& Handle, float Timeout);

	void HandleCallback(const struct FAttachLeaderboardUGCData& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC")
	}
	static class USteamCoreProUserStatsAsyncActionAttachLeaderboardUGC* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProUserStatsAsyncActionAttachLeaderboardUGC>();
	}
};
DUMPER7_ASSERTS_USteamCoreProUserStatsAsyncActionAttachLeaderboardUGC;

// Class SteamCorePro.SteamCoreProVoice
// 0x0000 (0x0440 - 0x0440)
class USteamCoreProVoice final : public USoundWaveProcedural
{
public:
	static class USteamCoreProVoice* ConstructSteamCoreProVoice(int32 AudioSampleRate);
	static void DestroySteamCoreProVoice(class USteamCoreProVoice* Obj);

	void AddAudioBuffer(const TArray<uint8>& Buffer);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProVoice")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProVoice")
	}
	static class USteamCoreProVoice* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProVoice>();
	}
};
DUMPER7_ASSERTS_USteamCoreProVoice;

// Class SteamCorePro.SteamCoreProAsyncActionListenForControllerChange
// 0x0010 (0x0040 - 0x0030)
class USteamCoreProAsyncActionListenForControllerChange final : public USteamCoreProAsyncAction
{
public:
	TMulticastInlineDelegate<void(bool bIsConnected, int32 UserId)> OnControllerChanged;             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USteamCoreProAsyncActionListenForControllerChange* ListenForControllerChange(class UObject* WorldContextObject);

	void HandleCallback(bool bIsConnected, int32 PlatformUserId, int32 UserId);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamCoreProAsyncActionListenForControllerChange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamCoreProAsyncActionListenForControllerChange")
	}
	static class USteamCoreProAsyncActionListenForControllerChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreProAsyncActionListenForControllerChange>();
	}
};
DUMPER7_ASSERTS_USteamCoreProAsyncActionListenForControllerChange;

// Class SteamCorePro.SteamUtilities
// 0x0000 (0x0028 - 0x0028)
class USteamUtilities final : public UBlueprintFunctionLibrary
{
public:
	static class FString BP_BytesToString(const TArray<uint8>& Array);
	static TArray<uint8> BP_StringToBytes(const class FString& String);
	static class FString BreakInventoryUpdateHandle(const struct FSteamInventoryUpdateHandle& Handle);
	static class FString BreakPublishedFileID(const struct FPublishedFileID& FileID);
	static class FString BreakSteamGameID(const struct FSteamGameID& SteamID);
	static class FString BreakSteamID(const struct FSteamID& SteamID);
	static int64 BreakSteamItemInstanceID(const struct FSteamItemInstanceID& SteamItemInstanceID);
	static class FString BreakTicketHandle(const struct FSteamTicketHandle& Handle);
	static class FString BreakUGCHandle(const struct FSteamUGCHandle& Handle);
	static class UServerFilter* ConstructServerFilter(class UObject* WorldContextObject);
	static class FString EncryptString(const class FString& String);
	static bool Equal(const struct FSteamID& A, const struct FSteamID& B);
	static void Equal_Exec(const struct FSteamID& A, const struct FSteamID& B, ESteamCoreProIdentical* Result);
	static struct FDateTime FromUnixTimestamp(const class FString& Timestamp);
	static class FString GetAccountId(const struct FSteamID& SteamID);
	static ESteamAccountType GetAccountType(const struct FSteamID& SteamID);
	static TArray<struct FOnlineFriendSteamCoreBlueprint> GetFriendsList(EFriendListType FriendListType);
	static bool GetGameEngineInitialized();
	static class FString GetHostPingData();
	static bool GetInteger(const struct FSteamSessionSetting& Settings, class FString* Key, int32* OutValue);
	static int32 GetPingFromHostData(const class FString& Data);
	static void GetPublicIp(const TDelegate<void(const class FString& Response)>& Callback);
	static struct FSteamID GetSteamIdFromPlayerState(class APlayerState* PlayerState);
	static bool GetString(const struct FSteamSessionSetting& Settings, class FString* Key, class FString* OutValue);
	static ESteamAttributeType GetType(const struct FSteamSessionSetting& Settings);
	static class FString GetVoiceInputDevice();
	static bool IsGameIDValid(const struct FSteamGameID& GameID);
	static void IsGameIDValid_Exec(const struct FSteamGameID& GameID, ESteamCoreProValid* Result);
	static bool IsLobby(const struct FSteamID& SteamID);
	static bool IsLocalPlayerTalking(class UObject* WorldContextObject, int32 LocalUserNum);
	static bool IsPlayerMuted(class UObject* WorldContextObject, class APlayerState* Player);
	static bool IsPublishedFileIDValid(const struct FPublishedFileID& PublishedFileID);
	static void IsPublishedFileIDValid_Exec(const struct FPublishedFileID& Handle, ESteamCoreProValid* Result);
	static bool IsRecalculatingPing();
	static bool IsRemotePlayerTalking(class UObject* WorldContextObject, class APlayerState* Player);
	static bool IsSteamAvailable();
	static void IsSteamIDValid_Exec(const struct FSteamID& SteamID, ESteamCoreProValid* Result);
	static bool IsSteamInventoryUpdateHandleValid(const struct FSteamInventoryUpdateHandle& Handle);
	static void IsSteamInventoryUpdateHandleValid_Exec(const struct FSteamInventoryUpdateHandle& Handle, ESteamCoreProValid* Result);
	static bool IsSteamServerInitialized();
	static bool IsSteamTicketHandleValid(const struct FSteamTicketHandle& Handle);
	static void IsSteamTicketHandleValid_Exec(const struct FSteamTicketHandle& Handle, ESteamCoreProValid* Result);
	static bool IsUGCHandleValid(const struct FSteamUGCHandle& Handle);
	static void IsUGCHandleValid_Exec(const struct FSteamUGCHandle& Handle, ESteamCoreProValid* Result);
	static bool IsUsingP2PRelays();
	static bool IsValid(const struct FSteamID& SteamID);
	static TArray<uint8> K2_HexToBytes(const class FString& String);
	static class FString K2_HexToString(const TArray<uint8>& Array);
	static bool K2_IsPlayerInSession(int32 LocalUserNum);
	static bool KickPlayer(class UObject* WorldContextObject, class APlayerController* KickedPlayer, const class FText& KickReason);
	static void ListenForSessionInviteAccepted(const TDelegate<void(bool bWasSuccessful, int32 LocalPlayerNum, const class FString& InvitedBy, const struct FBlueprintSessionResult& Session)>& Callback);
	static void ListenForSessionInviteRecieved(const TDelegate<void(const class FString& InvitedBy, const struct FBlueprintSessionResult& InviteResult)>& Callback);
	static void ListenForSteamMessages(const TDelegate<void(ESteamMessageType Type, const class FString& Message)>& Callback);
	static struct FSteamSessionSetting MakeInteger(const int32 Value);
	static struct FSteamInventoryUpdateHandle MakeInventoryUpdateHandle(const class FString& Value);
	static struct FPublishedFileID MakePublishedFileID(const class FString& Value);
	static struct FSteamSessionSearchSetting MakeSearchInteger(const ESteamComparisonOp ComparisonOperator, const int32 Value);
	static struct FSteamSessionSearchSetting MakeSearchString(const class FString& Value);
	static struct FSteamGameID MakeSteamGameID(const class FString& Value);
	static struct FSteamID MakeSteamID(const class FString& Value);
	static struct FSteamItemInstanceID MakeSteamItemInstanceID(int64 Value);
	static struct FSteamSessionSetting MakeString(const class FString& Value);
	static struct FSteamTicketHandle MakeTicketHandle(const class FString& Value);
	static struct FSteamUGCHandle MakeUGCHandle(const class FString& Value);
	static bool MuteRemoteTalker(class UObject* WorldContextObject, int32 LocalUserNum, class APlayerState* PlayerState, bool bIsSystemWide);
	static bool NotEqual(const struct FSteamID& A, const struct FSteamID& B);
	static bool PublishedFileID_Equals(const struct FPublishedFileID& A, const struct FPublishedFileID& B);
	static void PublishedFileID_Equals_Exec(const struct FPublishedFileID& A, const struct FPublishedFileID& B, ESteamCoreProIdentical* Result);
	static bool PublishedFileID_NotEquals(const struct FPublishedFileID& A, const struct FPublishedFileID& B);
	static TArray<uint8> ReadFileToBytes(const class FString& AbsoluteFilePath);
	static void ReadFriendList(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, EFriendListType FriendListType);
	static void ServerTravel(class UObject* WorldContextObject, const TSoftObjectPtr<class UWorld> Level, bool bAbsolute);
	static void SetLocalHost(struct FSteamNetworkingIdentity& SteamNetworkingIdentity);
	static void SetPSNId(struct FSteamNetworkingIdentity& SteamNetworkingIdentity, int64 ID);
	static void SetSteamId64(struct FSteamNetworkingIdentity& SteamNetworkingIdentity, const struct FSteamID& SteamID);
	static void SetType(struct FSteamNetworkingIdentity& SteamNetworkingIdentity, ESteamCoreNetworkingIdentityType Type);
	static void SetXboxPairwiseId(struct FSteamNetworkingIdentity& SteamNetworkingIdentity, const class FString& String);
	static bool SteamItemInstanceID_Equals(const struct FSteamItemInstanceID& A, const struct FSteamItemInstanceID& B);
	static void SteamItemInstanceID_Equals_Exec(const struct FSteamItemInstanceID& A, const struct FSteamItemInstanceID& B, ESteamCoreProIdentical* Result);
	static void StopListeningForSessionInviteAccepted();
	static void StopListeningForSessionInviteRecieved();
	static bool TryJoinServer(class FString* OutErrorMessage, const class UObject* WorldContextObject, const struct FSteamServerAddr& ServerAddr, class APlayerController* SpecificPlayer, bool bUsingSockets);
	static bool UnmuteRemoteTalker(class UObject* WorldContextObject, int32 LocalUserNum, class APlayerState* PlayerState, bool bIsSystemWide);
	static void UpdateVoiceInputDevice(const class FString& DeviceID);
	static bool WriteBytesToFile(bool bOverwriteIfExists, const class FString& AbsoluteFilePath, const TArray<uint8>& DataBuffer);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamUtilities")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamUtilities")
	}
	static class USteamUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamUtilities>();
	}
};
DUMPER7_ASSERTS_USteamUtilities;

// Class SteamCorePro.SteamProUtils
// 0x0150 (0x0178 - 0x0028)
class USteamProUtils final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FCheckFileSignature& Data)> CheckFileSignature;       // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGamepadTextInputDismissed& Data)> GamepadTextInputDismissed; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FIPCountry& Data)> IPCountry;                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLowBatteryPower& Data)> LowBatteryPower;             // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamShutdown& Data)> SteamShutdown;                 // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FAppResumingFromSuspend& Data)> AppResumingFromSuspend; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FFloatingGamepadTextInputDismissed& Data)> FloatingGamepadTextInputDismissed; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0xE0];                                      // 0x0098(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool BOverlayNeedsPresent();
	static bool DismissFloatingGamepadTextInput();
	static bool DismissGamepadTextInput();
	static int32 FilterText(ESteamTextFilteringContext Context, const struct FSteamID& SourceSteamID, const class FString& InputMessage, class FString* OutFilteredText);
	static int32 GetAppID();
	static int32 GetAppID_Pure();
	static ESteamUniverse GetConnectedUniverse();
	static int32 GetCurrentBatteryPower();
	static bool GetEnteredGamepadTextInput(class FString* Text);
	static int32 GetEnteredGamepadTextLength();
	static bool GetImageRGBA(int32 iImage, TArray<uint8>* OutBuffer);
	static bool GetImageSize(int32 iImage, int32* Width, int32* Height);
	static int32 GetIPCCallCount();
	static class FString GetIPCountry();
	static ESteamCoreIPv6ConnectivityState GetIPv6ConnectivityState(ESteamCoreIPv6ConnectivityProtocol Protocol);
	static int32 GetSecondsSinceAppActive();
	static int32 GetSecondsSinceComputerActive();
	static int32 GetServerRealTime();
	static class FString GetSteamUILanguage();
	static class USteamProUtils* GetSteamUtils();
	static bool InitFilterText();
	static bool IsOverlayEnabled();
	static bool IsSteamChinaLauncher();
	static bool IsSteamInBigPictureMode();
	static bool IsSteamRunningInVR();
	static bool IsVRHeadsetStreamingEnabled();
	static void SetGameLauncherMode(bool bLauncherMode);
	static void SetOverlayNotificationInset(int32 HorizontalInset, int32 VerticalInset);
	static void SetOverlayNotificationPosition(ESteamNotificationPosition NotificationPosition);
	static void SetVRHeadsetStreamingEnabled(bool bEnabled);
	static bool ShowFloatingGamepadTextInput(ESteamFloatingGamepadTextInputMode KeyboardMode, int32 TextFieldXPosition, int32 TextFieldYPosition, int32 TextFieldWidth, int32 TextFieldHeight);
	static bool ShowGamepadTextInput(ESteamGamepadTextInputMode InputMode, ESteamGamepadTextInputLineMode LineInputMode, const class FString& Description, int32 CharMax, const class FString& ExistingText);
	static void StartVRDashboard();

	bool IsSteamRunningOnSteamDeck();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProUtils")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProUtils")
	}
	static class USteamProUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProUtils>();
	}
};
DUMPER7_ASSERTS_USteamProUtils;

// Class SteamCorePro.SteamProVideo
// 0x0060 (0x0088 - 0x0028)
class USteamProVideo final : public USteamCoreInterface
{
public:
	TMulticastInlineDelegate<void(const struct FGetOPFSettingsResult& Data)> GetOPFSettingsResult;   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGetVideoURLResult& Data)> GetVideoURLResult;         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void GetOPFSettings(int32 VideoAppID);
	static bool GetOPFStringForApp(int32 VideoAppID, class FString* OutBuffer);
	static class USteamProVideo* GetSteamVideo();
	static void GetVideoURL(int32 VideoAppID);
	static bool IsBroadcasting(int32* NumViewers);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SteamProVideo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SteamProVideo")
	}
	static class USteamProVideo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamProVideo>();
	}
};
DUMPER7_ASSERTS_USteamProVideo;

}

