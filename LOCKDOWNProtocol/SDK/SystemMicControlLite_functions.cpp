#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SystemMicControlLite

#include "Basic.hpp"

#include "SystemMicControlLite_classes.hpp"
#include "SystemMicControlLite_parameters.hpp"


namespace SDK
{

// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicActiveDevices
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> USystemMicControlLiteBPLibrary::GetMicActiveDevices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicActiveDevices");

	Params::SystemMicControlLiteBPLibrary_GetMicActiveDevices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicDefaultDeviceId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USystemMicControlLiteBPLibrary::GetMicDefaultDeviceId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicDefaultDeviceId");

	Params::SystemMicControlLiteBPLibrary_GetMicDefaultDeviceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicDefaultDeviceName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USystemMicControlLiteBPLibrary::GetMicDefaultDeviceName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicDefaultDeviceName");

	Params::SystemMicControlLiteBPLibrary_GetMicDefaultDeviceName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicDeviceIdFromName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InDeviceName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutDeviceId                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::GetMicDeviceIdFromName(const class FString& InDeviceName, class FString* OutDeviceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicDeviceIdFromName");

	Params::SystemMicControlLiteBPLibrary_GetMicDeviceIdFromName Parms{};

	Parms.InDeviceName = std::move(InDeviceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeviceId != nullptr)
		*OutDeviceId = std::move(Parms.OutDeviceId);
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicDeviceNameFromId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InDeviceId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutDeviceName                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::GetMicDeviceNameFromId(const class FString& InDeviceId, class FString* OutDeviceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicDeviceNameFromId");

	Params::SystemMicControlLiteBPLibrary_GetMicDeviceNameFromId Parms{};

	Parms.InDeviceId = std::move(InDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeviceName != nullptr)
		*OutDeviceName = std::move(Parms.OutDeviceName);
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicVolume
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USystemMicControlLiteBPLibrary::GetMicVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicVolume");

	Params::SystemMicControlLiteBPLibrary_GetMicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicVolumeForDeviceId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InDeviceId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutVolume                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::GetMicVolumeForDeviceId(const class FString& InDeviceId, float* OutVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicVolumeForDeviceId");

	Params::SystemMicControlLiteBPLibrary_GetMicVolumeForDeviceId Parms{};

	Parms.InDeviceId = std::move(InDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVolume != nullptr)
		*OutVolume = Parms.OutVolume;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.GetMicVolumeForDeviceName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InDeviceName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutVolume                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::GetMicVolumeForDeviceName(const class FString& InDeviceName, float* OutVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "GetMicVolumeForDeviceName");

	Params::SystemMicControlLiteBPLibrary_GetMicVolumeForDeviceName Parms{};

	Parms.InDeviceName = std::move(InDeviceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVolume != nullptr)
		*OutVolume = Parms.OutVolume;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.SetMicVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::SetMicVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "SetMicVolume");

	Params::SystemMicControlLiteBPLibrary_SetMicVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.SetMicVolumeForDeviceId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::SetMicVolumeForDeviceId(const class FString& DeviceID, float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "SetMicVolumeForDeviceId");

	Params::SystemMicControlLiteBPLibrary_SetMicVolumeForDeviceId Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemMicControlLite.SystemMicControlLiteBPLibrary.SetMicVolumeForDeviceName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DeviceName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMicControlLiteBPLibrary::SetMicVolumeForDeviceName(const class FString& DeviceName, float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemMicControlLiteBPLibrary", "SetMicVolumeForDeviceName");

	Params::SystemMicControlLiteBPLibrary_SetMicVolumeForDeviceName Parms{};

	Parms.DeviceName = std::move(DeviceName);
	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

