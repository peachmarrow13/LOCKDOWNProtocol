#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vent

#include "Basic.hpp"

#include "Vent_classes.hpp"
#include "Vent_parameters.hpp"


namespace SDK
{

// Function Vent.Vent_C.All Update Filter Indicator
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Filter_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::All_Update_Filter_Indicator(uint8 Filter_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "All Update Filter Indicator");

	Params::Vent_C_All_Update_Filter_Indicator Parms{};

	Parms.Filter_State = Filter_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.All Update Lock Indicator
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_VentState                             State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Filter_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::All_Update_Lock_Indicator(E_VentState State, uint8 Filter_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "All Update Lock Indicator");

	Params::Vent_C_All_Update_Lock_Indicator Parms{};

	Parms.State = State;
	Parms.Filter_State = Filter_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bIsVirtualized                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature(bool bIsVirtualized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature");

	Params::Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature Parms{};

	Parms.bIsVirtualized = bIsVirtualized;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.BndEvt__Vent_Filter_K2Node_ComponentBoundEvent_2_Place Item__DelegateSignature
// (BlueprintEvent)

void AVent_C::BndEvt__Vent_Filter_K2Node_ComponentBoundEvent_2_Place_Item__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "BndEvt__Vent_Filter_K2Node_ComponentBoundEvent_2_Place Item__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.BndEvt__Vent_Filter_K2Node_ComponentBoundEvent_3_Take Item__DelegateSignature
// (BlueprintEvent)

void AVent_C::BndEvt__Vent_Filter_K2Node_ComponentBoundEvent_3_Take_Item__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "BndEvt__Vent_Filter_K2Node_ComponentBoundEvent_3_Take Item__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.Check Pitch
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_VentState                             Lock_State                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Filter_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::Check_Pitch(E_VentState Lock_State, uint8 Filter_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Check Pitch");

	Params::Vent_C_Check_Pitch Parms{};

	Parms.Lock_State = Lock_State;
	Parms.Filter_State = Filter_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.Check Screw
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_VentState*                            LockState_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::Check_Screw(E_VentState* LockState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Check Screw");

	Params::Vent_C_Check_Screw Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LockState_0 != nullptr)
		*LockState_0 = Parms.LockState_0;
}


// Function Vent.Vent_C.Clear
// (BlueprintCallable, BlueprintEvent)

void AVent_C::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.ExecuteUbergraph_Vent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::ExecuteUbergraph_Vent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "ExecuteUbergraph_Vent");

	Params::Vent_C_ExecuteUbergraph_Vent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.Get Map Position
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::Get_Map_Position(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Get Map Position");

	Params::Vent_C_Get_Map_Position Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function Vent.Vent_C.OnRep_Clean Request
// (BlueprintCallable, BlueprintEvent)

void AVent_C::OnRep_Clean_Request()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "OnRep_Clean Request");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.OnRep_FilterState
// (BlueprintCallable, BlueprintEvent)

void AVent_C::OnRep_FilterState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "OnRep_FilterState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.OnRep_LockState
// (BlueprintCallable, BlueprintEvent)

void AVent_C::OnRep_LockState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "OnRep_LockState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.OnRep_Sound Pitch
// (BlueprintCallable, BlueprintEvent)

void AVent_C::OnRep_Sound_Pitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "OnRep_Sound Pitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AVent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "ReceiveTick");

	Params::Vent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.Screw Change
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMec_C*                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AVent_C::Screw_Change(class AMec_C* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Screw Change");

	Params::Vent_C_Screw_Change Parms{};

	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.Set Light State
// (Public, BlueprintCallable, BlueprintEvent)

void AVent_C::Set_Light_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Set Light State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.Start Vent
// (BlueprintCallable, BlueprintEvent)

void AVent_C::Start_Vent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Start Vent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vent.Vent_C.Update Filter Indicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Filter_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::Update_Filter_Indicator(uint8 Filter_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Update Filter Indicator");

	Params::Vent_C_Update_Filter_Indicator Parms{};

	Parms.Filter_State = Filter_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.Update Lock Indicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_VentState                             Lock_State                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Filter_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVent_C::Update_Lock_Indicator(E_VentState Lock_State, uint8 Filter_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "Update Lock Indicator");

	Params::Vent_C_Update_Lock_Indicator Parms{};

	Parms.Lock_State = Lock_State;
	Parms.Filter_State = Filter_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vent.Vent_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVent_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vent_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

